// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/user"
	"github.com/anzhiyu-c/anheyu-app/ent/usernotificationconfig"
)

// UserNotificationConfigUpdate is the builder for updating UserNotificationConfig entities.
type UserNotificationConfigUpdate struct {
	config
	hooks     []Hook
	mutation  *UserNotificationConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserNotificationConfigUpdate builder.
func (_u *UserNotificationConfigUpdate) Where(ps ...predicate.UserNotificationConfig) *UserNotificationConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserNotificationConfigUpdate) SetUpdatedAt(v time.Time) *UserNotificationConfigUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserNotificationConfigUpdate) SetUserID(v uint) *UserNotificationConfigUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserNotificationConfigUpdate) SetNillableUserID(v *uint) *UserNotificationConfigUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (_u *UserNotificationConfigUpdate) SetNotificationTypeID(v uint) *UserNotificationConfigUpdate {
	_u.mutation.SetNotificationTypeID(v)
	return _u
}

// SetNillableNotificationTypeID sets the "notification_type_id" field if the given value is not nil.
func (_u *UserNotificationConfigUpdate) SetNillableNotificationTypeID(v *uint) *UserNotificationConfigUpdate {
	if v != nil {
		_u.SetNotificationTypeID(*v)
	}
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *UserNotificationConfigUpdate) SetIsEnabled(v bool) *UserNotificationConfigUpdate {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *UserNotificationConfigUpdate) SetNillableIsEnabled(v *bool) *UserNotificationConfigUpdate {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetEnabledChannels sets the "enabled_channels" field.
func (_u *UserNotificationConfigUpdate) SetEnabledChannels(v []string) *UserNotificationConfigUpdate {
	_u.mutation.SetEnabledChannels(v)
	return _u
}

// AppendEnabledChannels appends value to the "enabled_channels" field.
func (_u *UserNotificationConfigUpdate) AppendEnabledChannels(v []string) *UserNotificationConfigUpdate {
	_u.mutation.AppendEnabledChannels(v)
	return _u
}

// ClearEnabledChannels clears the value of the "enabled_channels" field.
func (_u *UserNotificationConfigUpdate) ClearEnabledChannels() *UserNotificationConfigUpdate {
	_u.mutation.ClearEnabledChannels()
	return _u
}

// SetNotificationEmail sets the "notification_email" field.
func (_u *UserNotificationConfigUpdate) SetNotificationEmail(v string) *UserNotificationConfigUpdate {
	_u.mutation.SetNotificationEmail(v)
	return _u
}

// SetNillableNotificationEmail sets the "notification_email" field if the given value is not nil.
func (_u *UserNotificationConfigUpdate) SetNillableNotificationEmail(v *string) *UserNotificationConfigUpdate {
	if v != nil {
		_u.SetNotificationEmail(*v)
	}
	return _u
}

// ClearNotificationEmail clears the value of the "notification_email" field.
func (_u *UserNotificationConfigUpdate) ClearNotificationEmail() *UserNotificationConfigUpdate {
	_u.mutation.ClearNotificationEmail()
	return _u
}

// SetCustomSettings sets the "custom_settings" field.
func (_u *UserNotificationConfigUpdate) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigUpdate {
	_u.mutation.SetCustomSettings(v)
	return _u
}

// ClearCustomSettings clears the value of the "custom_settings" field.
func (_u *UserNotificationConfigUpdate) ClearCustomSettings() *UserNotificationConfigUpdate {
	_u.mutation.ClearCustomSettings()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserNotificationConfigUpdate) SetUser(v *User) *UserNotificationConfigUpdate {
	return _u.SetUserID(v.ID)
}

// SetNotificationType sets the "notification_type" edge to the NotificationType entity.
func (_u *UserNotificationConfigUpdate) SetNotificationType(v *NotificationType) *UserNotificationConfigUpdate {
	return _u.SetNotificationTypeID(v.ID)
}

// Mutation returns the UserNotificationConfigMutation object of the builder.
func (_u *UserNotificationConfigUpdate) Mutation() *UserNotificationConfigMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserNotificationConfigUpdate) ClearUser() *UserNotificationConfigUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationType clears the "notification_type" edge to the NotificationType entity.
func (_u *UserNotificationConfigUpdate) ClearNotificationType() *UserNotificationConfigUpdate {
	_u.mutation.ClearNotificationType()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserNotificationConfigUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserNotificationConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserNotificationConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserNotificationConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserNotificationConfigUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := usernotificationconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserNotificationConfigUpdate) check() error {
	if v, ok := _u.mutation.NotificationEmail(); ok {
		if err := usernotificationconfig.NotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "notification_email", err: fmt.Errorf(`ent: validator failed for field "UserNotificationConfig.notification_email": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationConfig.user"`)
	}
	if _u.mutation.NotificationTypeCleared() && len(_u.mutation.NotificationTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationConfig.notification_type"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserNotificationConfigUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserNotificationConfigUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserNotificationConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationconfig.Table, usernotificationconfig.Columns, sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(usernotificationconfig.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnabledChannels(); ok {
		_spec.SetField(usernotificationconfig.FieldEnabledChannels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedEnabledChannels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usernotificationconfig.FieldEnabledChannels, value)
		})
	}
	if _u.mutation.EnabledChannelsCleared() {
		_spec.ClearField(usernotificationconfig.FieldEnabledChannels, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotificationEmail(); ok {
		_spec.SetField(usernotificationconfig.FieldNotificationEmail, field.TypeString, value)
	}
	if _u.mutation.NotificationEmailCleared() {
		_spec.ClearField(usernotificationconfig.FieldNotificationEmail, field.TypeString)
	}
	if value, ok := _u.mutation.CustomSettings(); ok {
		_spec.SetField(usernotificationconfig.FieldCustomSettings, field.TypeJSON, value)
	}
	if _u.mutation.CustomSettingsCleared() {
		_spec.ClearField(usernotificationconfig.FieldCustomSettings, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.UserTable,
			Columns: []string{usernotificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.UserTable,
			Columns: []string{usernotificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.NotificationTypeTable,
			Columns: []string{usernotificationconfig.NotificationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.NotificationTypeTable,
			Columns: []string{usernotificationconfig.NotificationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserNotificationConfigUpdateOne is the builder for updating a single UserNotificationConfig entity.
type UserNotificationConfigUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserNotificationConfigMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserNotificationConfigUpdateOne) SetUpdatedAt(v time.Time) *UserNotificationConfigUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserNotificationConfigUpdateOne) SetUserID(v uint) *UserNotificationConfigUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserNotificationConfigUpdateOne) SetNillableUserID(v *uint) *UserNotificationConfigUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (_u *UserNotificationConfigUpdateOne) SetNotificationTypeID(v uint) *UserNotificationConfigUpdateOne {
	_u.mutation.SetNotificationTypeID(v)
	return _u
}

// SetNillableNotificationTypeID sets the "notification_type_id" field if the given value is not nil.
func (_u *UserNotificationConfigUpdateOne) SetNillableNotificationTypeID(v *uint) *UserNotificationConfigUpdateOne {
	if v != nil {
		_u.SetNotificationTypeID(*v)
	}
	return _u
}

// SetIsEnabled sets the "is_enabled" field.
func (_u *UserNotificationConfigUpdateOne) SetIsEnabled(v bool) *UserNotificationConfigUpdateOne {
	_u.mutation.SetIsEnabled(v)
	return _u
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_u *UserNotificationConfigUpdateOne) SetNillableIsEnabled(v *bool) *UserNotificationConfigUpdateOne {
	if v != nil {
		_u.SetIsEnabled(*v)
	}
	return _u
}

// SetEnabledChannels sets the "enabled_channels" field.
func (_u *UserNotificationConfigUpdateOne) SetEnabledChannels(v []string) *UserNotificationConfigUpdateOne {
	_u.mutation.SetEnabledChannels(v)
	return _u
}

// AppendEnabledChannels appends value to the "enabled_channels" field.
func (_u *UserNotificationConfigUpdateOne) AppendEnabledChannels(v []string) *UserNotificationConfigUpdateOne {
	_u.mutation.AppendEnabledChannels(v)
	return _u
}

// ClearEnabledChannels clears the value of the "enabled_channels" field.
func (_u *UserNotificationConfigUpdateOne) ClearEnabledChannels() *UserNotificationConfigUpdateOne {
	_u.mutation.ClearEnabledChannels()
	return _u
}

// SetNotificationEmail sets the "notification_email" field.
func (_u *UserNotificationConfigUpdateOne) SetNotificationEmail(v string) *UserNotificationConfigUpdateOne {
	_u.mutation.SetNotificationEmail(v)
	return _u
}

// SetNillableNotificationEmail sets the "notification_email" field if the given value is not nil.
func (_u *UserNotificationConfigUpdateOne) SetNillableNotificationEmail(v *string) *UserNotificationConfigUpdateOne {
	if v != nil {
		_u.SetNotificationEmail(*v)
	}
	return _u
}

// ClearNotificationEmail clears the value of the "notification_email" field.
func (_u *UserNotificationConfigUpdateOne) ClearNotificationEmail() *UserNotificationConfigUpdateOne {
	_u.mutation.ClearNotificationEmail()
	return _u
}

// SetCustomSettings sets the "custom_settings" field.
func (_u *UserNotificationConfigUpdateOne) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigUpdateOne {
	_u.mutation.SetCustomSettings(v)
	return _u
}

// ClearCustomSettings clears the value of the "custom_settings" field.
func (_u *UserNotificationConfigUpdateOne) ClearCustomSettings() *UserNotificationConfigUpdateOne {
	_u.mutation.ClearCustomSettings()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserNotificationConfigUpdateOne) SetUser(v *User) *UserNotificationConfigUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetNotificationType sets the "notification_type" edge to the NotificationType entity.
func (_u *UserNotificationConfigUpdateOne) SetNotificationType(v *NotificationType) *UserNotificationConfigUpdateOne {
	return _u.SetNotificationTypeID(v.ID)
}

// Mutation returns the UserNotificationConfigMutation object of the builder.
func (_u *UserNotificationConfigUpdateOne) Mutation() *UserNotificationConfigMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserNotificationConfigUpdateOne) ClearUser() *UserNotificationConfigUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearNotificationType clears the "notification_type" edge to the NotificationType entity.
func (_u *UserNotificationConfigUpdateOne) ClearNotificationType() *UserNotificationConfigUpdateOne {
	_u.mutation.ClearNotificationType()
	return _u
}

// Where appends a list predicates to the UserNotificationConfigUpdate builder.
func (_u *UserNotificationConfigUpdateOne) Where(ps ...predicate.UserNotificationConfig) *UserNotificationConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserNotificationConfigUpdateOne) Select(field string, fields ...string) *UserNotificationConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserNotificationConfig entity.
func (_u *UserNotificationConfigUpdateOne) Save(ctx context.Context) (*UserNotificationConfig, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserNotificationConfigUpdateOne) SaveX(ctx context.Context) *UserNotificationConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserNotificationConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserNotificationConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserNotificationConfigUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := usernotificationconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserNotificationConfigUpdateOne) check() error {
	if v, ok := _u.mutation.NotificationEmail(); ok {
		if err := usernotificationconfig.NotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "notification_email", err: fmt.Errorf(`ent: validator failed for field "UserNotificationConfig.notification_email": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationConfig.user"`)
	}
	if _u.mutation.NotificationTypeCleared() && len(_u.mutation.NotificationTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserNotificationConfig.notification_type"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *UserNotificationConfigUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserNotificationConfigUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *UserNotificationConfigUpdateOne) sqlSave(ctx context.Context) (_node *UserNotificationConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usernotificationconfig.Table, usernotificationconfig.Columns, sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserNotificationConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usernotificationconfig.FieldID)
		for _, f := range fields {
			if !usernotificationconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usernotificationconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.IsEnabled(); ok {
		_spec.SetField(usernotificationconfig.FieldIsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.EnabledChannels(); ok {
		_spec.SetField(usernotificationconfig.FieldEnabledChannels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedEnabledChannels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usernotificationconfig.FieldEnabledChannels, value)
		})
	}
	if _u.mutation.EnabledChannelsCleared() {
		_spec.ClearField(usernotificationconfig.FieldEnabledChannels, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotificationEmail(); ok {
		_spec.SetField(usernotificationconfig.FieldNotificationEmail, field.TypeString, value)
	}
	if _u.mutation.NotificationEmailCleared() {
		_spec.ClearField(usernotificationconfig.FieldNotificationEmail, field.TypeString)
	}
	if value, ok := _u.mutation.CustomSettings(); ok {
		_spec.SetField(usernotificationconfig.FieldCustomSettings, field.TypeJSON, value)
	}
	if _u.mutation.CustomSettingsCleared() {
		_spec.ClearField(usernotificationconfig.FieldCustomSettings, field.TypeJSON)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.UserTable,
			Columns: []string{usernotificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.UserTable,
			Columns: []string{usernotificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotificationTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.NotificationTypeTable,
			Columns: []string{usernotificationconfig.NotificationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotificationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.NotificationTypeTable,
			Columns: []string{usernotificationconfig.NotificationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &UserNotificationConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usernotificationconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
