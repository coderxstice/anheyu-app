// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/album"
	"github.com/anzhiyu-c/anheyu-app/ent/albumcategory"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// AlbumCategoryUpdate is the builder for updating AlbumCategory entities.
type AlbumCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AlbumCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AlbumCategoryUpdate builder.
func (_u *AlbumCategoryUpdate) Where(ps ...predicate.AlbumCategory) *AlbumCategoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *AlbumCategoryUpdate) SetName(v string) *AlbumCategoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AlbumCategoryUpdate) SetNillableName(v *string) *AlbumCategoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AlbumCategoryUpdate) SetDescription(v string) *AlbumCategoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AlbumCategoryUpdate) SetNillableDescription(v *string) *AlbumCategoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AlbumCategoryUpdate) ClearDescription() *AlbumCategoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *AlbumCategoryUpdate) SetDisplayOrder(v int) *AlbumCategoryUpdate {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *AlbumCategoryUpdate) SetNillableDisplayOrder(v *int) *AlbumCategoryUpdate {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *AlbumCategoryUpdate) AddDisplayOrder(v int) *AlbumCategoryUpdate {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (_u *AlbumCategoryUpdate) AddAlbumIDs(ids ...uint) *AlbumCategoryUpdate {
	_u.mutation.AddAlbumIDs(ids...)
	return _u
}

// AddAlbums adds the "albums" edges to the Album entity.
func (_u *AlbumCategoryUpdate) AddAlbums(v ...*Album) *AlbumCategoryUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAlbumIDs(ids...)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (_u *AlbumCategoryUpdate) Mutation() *AlbumCategoryMutation {
	return _u.mutation
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (_u *AlbumCategoryUpdate) ClearAlbums() *AlbumCategoryUpdate {
	_u.mutation.ClearAlbums()
	return _u
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (_u *AlbumCategoryUpdate) RemoveAlbumIDs(ids ...uint) *AlbumCategoryUpdate {
	_u.mutation.RemoveAlbumIDs(ids...)
	return _u
}

// RemoveAlbums removes "albums" edges to Album entities.
func (_u *AlbumCategoryUpdate) RemoveAlbums(v ...*Album) *AlbumCategoryUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAlbumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AlbumCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AlbumCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AlbumCategoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AlbumCategoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AlbumCategoryUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := albumcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AlbumCategory.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AlbumCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlbumCategoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AlbumCategoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(albumcategory.Table, albumcategory.Columns, sqlgraph.NewFieldSpec(albumcategory.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(albumcategory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(albumcategory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(albumcategory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(albumcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(albumcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if _u.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !_u.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albumcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AlbumCategoryUpdateOne is the builder for updating a single AlbumCategory entity.
type AlbumCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AlbumCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (_u *AlbumCategoryUpdateOne) SetName(v string) *AlbumCategoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *AlbumCategoryUpdateOne) SetNillableName(v *string) *AlbumCategoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *AlbumCategoryUpdateOne) SetDescription(v string) *AlbumCategoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AlbumCategoryUpdateOne) SetNillableDescription(v *string) *AlbumCategoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *AlbumCategoryUpdateOne) ClearDescription() *AlbumCategoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetDisplayOrder sets the "display_order" field.
func (_u *AlbumCategoryUpdateOne) SetDisplayOrder(v int) *AlbumCategoryUpdateOne {
	_u.mutation.ResetDisplayOrder()
	_u.mutation.SetDisplayOrder(v)
	return _u
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_u *AlbumCategoryUpdateOne) SetNillableDisplayOrder(v *int) *AlbumCategoryUpdateOne {
	if v != nil {
		_u.SetDisplayOrder(*v)
	}
	return _u
}

// AddDisplayOrder adds value to the "display_order" field.
func (_u *AlbumCategoryUpdateOne) AddDisplayOrder(v int) *AlbumCategoryUpdateOne {
	_u.mutation.AddDisplayOrder(v)
	return _u
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (_u *AlbumCategoryUpdateOne) AddAlbumIDs(ids ...uint) *AlbumCategoryUpdateOne {
	_u.mutation.AddAlbumIDs(ids...)
	return _u
}

// AddAlbums adds the "albums" edges to the Album entity.
func (_u *AlbumCategoryUpdateOne) AddAlbums(v ...*Album) *AlbumCategoryUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAlbumIDs(ids...)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (_u *AlbumCategoryUpdateOne) Mutation() *AlbumCategoryMutation {
	return _u.mutation
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (_u *AlbumCategoryUpdateOne) ClearAlbums() *AlbumCategoryUpdateOne {
	_u.mutation.ClearAlbums()
	return _u
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (_u *AlbumCategoryUpdateOne) RemoveAlbumIDs(ids ...uint) *AlbumCategoryUpdateOne {
	_u.mutation.RemoveAlbumIDs(ids...)
	return _u
}

// RemoveAlbums removes "albums" edges to Album entities.
func (_u *AlbumCategoryUpdateOne) RemoveAlbums(v ...*Album) *AlbumCategoryUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAlbumIDs(ids...)
}

// Where appends a list predicates to the AlbumCategoryUpdate builder.
func (_u *AlbumCategoryUpdateOne) Where(ps ...predicate.AlbumCategory) *AlbumCategoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AlbumCategoryUpdateOne) Select(field string, fields ...string) *AlbumCategoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AlbumCategory entity.
func (_u *AlbumCategoryUpdateOne) Save(ctx context.Context) (*AlbumCategory, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AlbumCategoryUpdateOne) SaveX(ctx context.Context) *AlbumCategory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AlbumCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AlbumCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AlbumCategoryUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := albumcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AlbumCategory.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *AlbumCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AlbumCategoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *AlbumCategoryUpdateOne) sqlSave(ctx context.Context) (_node *AlbumCategory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(albumcategory.Table, albumcategory.Columns, sqlgraph.NewFieldSpec(albumcategory.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlbumCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, albumcategory.FieldID)
		for _, f := range fields {
			if !albumcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != albumcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(albumcategory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(albumcategory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(albumcategory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayOrder(); ok {
		_spec.SetField(albumcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(albumcategory.FieldDisplayOrder, field.TypeInt, value)
	}
	if _u.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !_u.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &AlbumCategory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{albumcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
