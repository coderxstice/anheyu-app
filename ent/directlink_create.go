// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/directlink"
	"github.com/anzhiyu-c/anheyu-app/ent/file"
)

// DirectLinkCreate is the builder for creating a DirectLink entity.
type DirectLinkCreate struct {
	config
	mutation *DirectLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *DirectLinkCreate) SetDeletedAt(v time.Time) *DirectLinkCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *DirectLinkCreate) SetNillableDeletedAt(v *time.Time) *DirectLinkCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *DirectLinkCreate) SetCreatedAt(v time.Time) *DirectLinkCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *DirectLinkCreate) SetNillableCreatedAt(v *time.Time) *DirectLinkCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *DirectLinkCreate) SetUpdatedAt(v time.Time) *DirectLinkCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *DirectLinkCreate) SetNillableUpdatedAt(v *time.Time) *DirectLinkCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *DirectLinkCreate) SetFileID(v uint) *DirectLinkCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetFileName sets the "file_name" field.
func (_c *DirectLinkCreate) SetFileName(v string) *DirectLinkCreate {
	_c.mutation.SetFileName(v)
	return _c
}

// SetSpeedLimit sets the "speed_limit" field.
func (_c *DirectLinkCreate) SetSpeedLimit(v int64) *DirectLinkCreate {
	_c.mutation.SetSpeedLimit(v)
	return _c
}

// SetNillableSpeedLimit sets the "speed_limit" field if the given value is not nil.
func (_c *DirectLinkCreate) SetNillableSpeedLimit(v *int64) *DirectLinkCreate {
	if v != nil {
		_c.SetSpeedLimit(*v)
	}
	return _c
}

// SetDownloads sets the "downloads" field.
func (_c *DirectLinkCreate) SetDownloads(v int64) *DirectLinkCreate {
	_c.mutation.SetDownloads(v)
	return _c
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (_c *DirectLinkCreate) SetNillableDownloads(v *int64) *DirectLinkCreate {
	if v != nil {
		_c.SetDownloads(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *DirectLinkCreate) SetID(v uint) *DirectLinkCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetFile sets the "file" edge to the File entity.
func (_c *DirectLinkCreate) SetFile(v *File) *DirectLinkCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the DirectLinkMutation object of the builder.
func (_c *DirectLinkCreate) Mutation() *DirectLinkMutation {
	return _c.mutation
}

// Save creates the DirectLink in the database.
func (_c *DirectLinkCreate) Save(ctx context.Context) (*DirectLink, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DirectLinkCreate) SaveX(ctx context.Context) *DirectLink {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DirectLinkCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DirectLinkCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DirectLinkCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if directlink.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized directlink.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := directlink.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if directlink.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized directlink.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := directlink.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.SpeedLimit(); !ok {
		v := directlink.DefaultSpeedLimit
		_c.mutation.SetSpeedLimit(v)
	}
	if _, ok := _c.mutation.Downloads(); !ok {
		v := directlink.DefaultDownloads
		_c.mutation.SetDownloads(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *DirectLinkCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DirectLink.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DirectLink.updated_at"`)}
	}
	if _, ok := _c.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`ent: missing required field "DirectLink.file_id"`)}
	}
	if _, ok := _c.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "DirectLink.file_name"`)}
	}
	if v, ok := _c.mutation.FileName(); ok {
		if err := directlink.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "DirectLink.file_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SpeedLimit(); !ok {
		return &ValidationError{Name: "speed_limit", err: errors.New(`ent: missing required field "DirectLink.speed_limit"`)}
	}
	if _, ok := _c.mutation.Downloads(); !ok {
		return &ValidationError{Name: "downloads", err: errors.New(`ent: missing required field "DirectLink.downloads"`)}
	}
	if len(_c.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "DirectLink.file"`)}
	}
	return nil
}

func (_c *DirectLinkCreate) sqlSave(ctx context.Context) (*DirectLink, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DirectLinkCreate) createSpec() (*DirectLink, *sqlgraph.CreateSpec) {
	var (
		_node = &DirectLink{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(directlink.Table, sqlgraph.NewFieldSpec(directlink.FieldID, field.TypeUint))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(directlink.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(directlink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(directlink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.FileName(); ok {
		_spec.SetField(directlink.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := _c.mutation.SpeedLimit(); ok {
		_spec.SetField(directlink.FieldSpeedLimit, field.TypeInt64, value)
		_node.SpeedLimit = value
	}
	if value, ok := _c.mutation.Downloads(); ok {
		_spec.SetField(directlink.FieldDownloads, field.TypeInt64, value)
		_node.Downloads = value
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   directlink.FileTable,
			Columns: []string{directlink.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DirectLink.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DirectLinkUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DirectLinkCreate) OnConflict(opts ...sql.ConflictOption) *DirectLinkUpsertOne {
	_c.conflict = opts
	return &DirectLinkUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DirectLinkCreate) OnConflictColumns(columns ...string) *DirectLinkUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DirectLinkUpsertOne{
		create: _c,
	}
}

type (
	// DirectLinkUpsertOne is the builder for "upsert"-ing
	//  one DirectLink node.
	DirectLinkUpsertOne struct {
		create *DirectLinkCreate
	}

	// DirectLinkUpsert is the "OnConflict" setter.
	DirectLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *DirectLinkUpsert) SetDeletedAt(v time.Time) *DirectLinkUpsert {
	u.Set(directlink.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateDeletedAt() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DirectLinkUpsert) ClearDeletedAt() *DirectLinkUpsert {
	u.SetNull(directlink.FieldDeletedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DirectLinkUpsert) SetUpdatedAt(v time.Time) *DirectLinkUpsert {
	u.Set(directlink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateUpdatedAt() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldUpdatedAt)
	return u
}

// SetFileID sets the "file_id" field.
func (u *DirectLinkUpsert) SetFileID(v uint) *DirectLinkUpsert {
	u.Set(directlink.FieldFileID, v)
	return u
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateFileID() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldFileID)
	return u
}

// SetFileName sets the "file_name" field.
func (u *DirectLinkUpsert) SetFileName(v string) *DirectLinkUpsert {
	u.Set(directlink.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateFileName() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldFileName)
	return u
}

// SetSpeedLimit sets the "speed_limit" field.
func (u *DirectLinkUpsert) SetSpeedLimit(v int64) *DirectLinkUpsert {
	u.Set(directlink.FieldSpeedLimit, v)
	return u
}

// UpdateSpeedLimit sets the "speed_limit" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateSpeedLimit() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldSpeedLimit)
	return u
}

// AddSpeedLimit adds v to the "speed_limit" field.
func (u *DirectLinkUpsert) AddSpeedLimit(v int64) *DirectLinkUpsert {
	u.Add(directlink.FieldSpeedLimit, v)
	return u
}

// SetDownloads sets the "downloads" field.
func (u *DirectLinkUpsert) SetDownloads(v int64) *DirectLinkUpsert {
	u.Set(directlink.FieldDownloads, v)
	return u
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *DirectLinkUpsert) UpdateDownloads() *DirectLinkUpsert {
	u.SetExcluded(directlink.FieldDownloads)
	return u
}

// AddDownloads adds v to the "downloads" field.
func (u *DirectLinkUpsert) AddDownloads(v int64) *DirectLinkUpsert {
	u.Add(directlink.FieldDownloads, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(directlink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DirectLinkUpsertOne) UpdateNewValues() *DirectLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(directlink.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(directlink.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DirectLinkUpsertOne) Ignore() *DirectLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DirectLinkUpsertOne) DoNothing() *DirectLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DirectLinkCreate.OnConflict
// documentation for more info.
func (u *DirectLinkUpsertOne) Update(set func(*DirectLinkUpsert)) *DirectLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DirectLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DirectLinkUpsertOne) SetDeletedAt(v time.Time) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateDeletedAt() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DirectLinkUpsertOne) ClearDeletedAt() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DirectLinkUpsertOne) SetUpdatedAt(v time.Time) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateUpdatedAt() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFileID sets the "file_id" field.
func (u *DirectLinkUpsertOne) SetFileID(v uint) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateFileID() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateFileID()
	})
}

// SetFileName sets the "file_name" field.
func (u *DirectLinkUpsertOne) SetFileName(v string) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateFileName() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateFileName()
	})
}

// SetSpeedLimit sets the "speed_limit" field.
func (u *DirectLinkUpsertOne) SetSpeedLimit(v int64) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetSpeedLimit(v)
	})
}

// AddSpeedLimit adds v to the "speed_limit" field.
func (u *DirectLinkUpsertOne) AddSpeedLimit(v int64) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.AddSpeedLimit(v)
	})
}

// UpdateSpeedLimit sets the "speed_limit" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateSpeedLimit() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateSpeedLimit()
	})
}

// SetDownloads sets the "downloads" field.
func (u *DirectLinkUpsertOne) SetDownloads(v int64) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetDownloads(v)
	})
}

// AddDownloads adds v to the "downloads" field.
func (u *DirectLinkUpsertOne) AddDownloads(v int64) *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.AddDownloads(v)
	})
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *DirectLinkUpsertOne) UpdateDownloads() *DirectLinkUpsertOne {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateDownloads()
	})
}

// Exec executes the query.
func (u *DirectLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DirectLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DirectLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DirectLinkUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DirectLinkUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DirectLinkCreateBulk is the builder for creating many DirectLink entities in bulk.
type DirectLinkCreateBulk struct {
	config
	err      error
	builders []*DirectLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the DirectLink entities in the database.
func (_c *DirectLinkCreateBulk) Save(ctx context.Context) ([]*DirectLink, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*DirectLink, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DirectLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DirectLinkCreateBulk) SaveX(ctx context.Context) []*DirectLink {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DirectLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DirectLinkCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.DirectLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DirectLinkUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *DirectLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *DirectLinkUpsertBulk {
	_c.conflict = opts
	return &DirectLinkUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *DirectLinkCreateBulk) OnConflictColumns(columns ...string) *DirectLinkUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &DirectLinkUpsertBulk{
		create: _c,
	}
}

// DirectLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of DirectLink nodes.
type DirectLinkUpsertBulk struct {
	create *DirectLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(directlink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DirectLinkUpsertBulk) UpdateNewValues() *DirectLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(directlink.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(directlink.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.DirectLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DirectLinkUpsertBulk) Ignore() *DirectLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DirectLinkUpsertBulk) DoNothing() *DirectLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DirectLinkCreateBulk.OnConflict
// documentation for more info.
func (u *DirectLinkUpsertBulk) Update(set func(*DirectLinkUpsert)) *DirectLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DirectLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *DirectLinkUpsertBulk) SetDeletedAt(v time.Time) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateDeletedAt() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *DirectLinkUpsertBulk) ClearDeletedAt() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.ClearDeletedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *DirectLinkUpsertBulk) SetUpdatedAt(v time.Time) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateUpdatedAt() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetFileID sets the "file_id" field.
func (u *DirectLinkUpsertBulk) SetFileID(v uint) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetFileID(v)
	})
}

// UpdateFileID sets the "file_id" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateFileID() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateFileID()
	})
}

// SetFileName sets the "file_name" field.
func (u *DirectLinkUpsertBulk) SetFileName(v string) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateFileName() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateFileName()
	})
}

// SetSpeedLimit sets the "speed_limit" field.
func (u *DirectLinkUpsertBulk) SetSpeedLimit(v int64) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetSpeedLimit(v)
	})
}

// AddSpeedLimit adds v to the "speed_limit" field.
func (u *DirectLinkUpsertBulk) AddSpeedLimit(v int64) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.AddSpeedLimit(v)
	})
}

// UpdateSpeedLimit sets the "speed_limit" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateSpeedLimit() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateSpeedLimit()
	})
}

// SetDownloads sets the "downloads" field.
func (u *DirectLinkUpsertBulk) SetDownloads(v int64) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.SetDownloads(v)
	})
}

// AddDownloads adds v to the "downloads" field.
func (u *DirectLinkUpsertBulk) AddDownloads(v int64) *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.AddDownloads(v)
	})
}

// UpdateDownloads sets the "downloads" field to the value that was provided on create.
func (u *DirectLinkUpsertBulk) UpdateDownloads() *DirectLinkUpsertBulk {
	return u.Update(func(s *DirectLinkUpsert) {
		s.UpdateDownloads()
	})
}

// Exec executes the query.
func (u *DirectLinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DirectLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DirectLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DirectLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
