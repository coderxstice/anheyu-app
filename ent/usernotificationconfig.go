// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
	"github.com/anzhiyu-c/anheyu-app/ent/user"
	"github.com/anzhiyu-c/anheyu-app/ent/usernotificationconfig"
)

// UserNotificationConfig is the model entity for the UserNotificationConfig schema.
type UserNotificationConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 用户ID
	UserID uint `json:"user_id,omitempty"`
	// 通知类型ID
	NotificationTypeID uint `json:"notification_type_id,omitempty"`
	// 是否启用该类型通知
	IsEnabled bool `json:"is_enabled,omitempty"`
	// 启用的通知渠道
	EnabledChannels []string `json:"enabled_channels,omitempty"`
	// 接收通知的邮箱地址
	NotificationEmail string `json:"notification_email,omitempty"`
	// 自定义配置
	CustomSettings map[string]interface{} `json:"custom_settings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserNotificationConfigQuery when eager-loading is set.
	Edges        UserNotificationConfigEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserNotificationConfigEdges holds the relations/edges for other nodes in the graph.
type UserNotificationConfigEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// NotificationType holds the value of the notification_type edge.
	NotificationType *NotificationType `json:"notification_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationConfigEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// NotificationTypeOrErr returns the NotificationType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserNotificationConfigEdges) NotificationTypeOrErr() (*NotificationType, error) {
	if e.NotificationType != nil {
		return e.NotificationType, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: notificationtype.Label}
	}
	return nil, &NotLoadedError{edge: "notification_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserNotificationConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usernotificationconfig.FieldEnabledChannels, usernotificationconfig.FieldCustomSettings:
			values[i] = new([]byte)
		case usernotificationconfig.FieldIsEnabled:
			values[i] = new(sql.NullBool)
		case usernotificationconfig.FieldID, usernotificationconfig.FieldUserID, usernotificationconfig.FieldNotificationTypeID:
			values[i] = new(sql.NullInt64)
		case usernotificationconfig.FieldNotificationEmail:
			values[i] = new(sql.NullString)
		case usernotificationconfig.FieldCreatedAt, usernotificationconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserNotificationConfig fields.
func (_m *UserNotificationConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usernotificationconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case usernotificationconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case usernotificationconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case usernotificationconfig.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = uint(value.Int64)
			}
		case usernotificationconfig.FieldNotificationTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field notification_type_id", values[i])
			} else if value.Valid {
				_m.NotificationTypeID = uint(value.Int64)
			}
		case usernotificationconfig.FieldIsEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_enabled", values[i])
			} else if value.Valid {
				_m.IsEnabled = value.Bool
			}
		case usernotificationconfig.FieldEnabledChannels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field enabled_channels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.EnabledChannels); err != nil {
					return fmt.Errorf("unmarshal field enabled_channels: %w", err)
				}
			}
		case usernotificationconfig.FieldNotificationEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notification_email", values[i])
			} else if value.Valid {
				_m.NotificationEmail = value.String
			}
		case usernotificationconfig.FieldCustomSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field custom_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.CustomSettings); err != nil {
					return fmt.Errorf("unmarshal field custom_settings: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserNotificationConfig.
// This includes values selected through modifiers, order, etc.
func (_m *UserNotificationConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserNotificationConfig entity.
func (_m *UserNotificationConfig) QueryUser() *UserQuery {
	return NewUserNotificationConfigClient(_m.config).QueryUser(_m)
}

// QueryNotificationType queries the "notification_type" edge of the UserNotificationConfig entity.
func (_m *UserNotificationConfig) QueryNotificationType() *NotificationTypeQuery {
	return NewUserNotificationConfigClient(_m.config).QueryNotificationType(_m)
}

// Update returns a builder for updating this UserNotificationConfig.
// Note that you need to call UserNotificationConfig.Unwrap() before calling this method if this UserNotificationConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserNotificationConfig) Update() *UserNotificationConfigUpdateOne {
	return NewUserNotificationConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserNotificationConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserNotificationConfig) Unwrap() *UserNotificationConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserNotificationConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserNotificationConfig) String() string {
	var builder strings.Builder
	builder.WriteString("UserNotificationConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("notification_type_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.NotificationTypeID))
	builder.WriteString(", ")
	builder.WriteString("is_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsEnabled))
	builder.WriteString(", ")
	builder.WriteString("enabled_channels=")
	builder.WriteString(fmt.Sprintf("%v", _m.EnabledChannels))
	builder.WriteString(", ")
	builder.WriteString("notification_email=")
	builder.WriteString(_m.NotificationEmail)
	builder.WriteString(", ")
	builder.WriteString("custom_settings=")
	builder.WriteString(fmt.Sprintf("%v", _m.CustomSettings))
	builder.WriteByte(')')
	return builder.String()
}

// UserNotificationConfigs is a parsable slice of UserNotificationConfig.
type UserNotificationConfigs []*UserNotificationConfig
