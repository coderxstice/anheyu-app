// Code generated by ent, DO NOT EDIT.

package usernotificationconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldUserID, v))
}

// NotificationTypeID applies equality check predicate on the "notification_type_id" field. It's identical to NotificationTypeIDEQ.
func NotificationTypeID(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldNotificationTypeID, v))
}

// IsEnabled applies equality check predicate on the "is_enabled" field. It's identical to IsEnabledEQ.
func IsEnabled(v bool) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldIsEnabled, v))
}

// NotificationEmail applies equality check predicate on the "notification_email" field. It's identical to NotificationEmailEQ.
func NotificationEmail(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldNotificationEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldUserID, vs...))
}

// NotificationTypeIDEQ applies the EQ predicate on the "notification_type_id" field.
func NotificationTypeIDEQ(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldNotificationTypeID, v))
}

// NotificationTypeIDNEQ applies the NEQ predicate on the "notification_type_id" field.
func NotificationTypeIDNEQ(v uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldNotificationTypeID, v))
}

// NotificationTypeIDIn applies the In predicate on the "notification_type_id" field.
func NotificationTypeIDIn(vs ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldNotificationTypeID, vs...))
}

// NotificationTypeIDNotIn applies the NotIn predicate on the "notification_type_id" field.
func NotificationTypeIDNotIn(vs ...uint) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldNotificationTypeID, vs...))
}

// IsEnabledEQ applies the EQ predicate on the "is_enabled" field.
func IsEnabledEQ(v bool) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldIsEnabled, v))
}

// IsEnabledNEQ applies the NEQ predicate on the "is_enabled" field.
func IsEnabledNEQ(v bool) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldIsEnabled, v))
}

// EnabledChannelsIsNil applies the IsNil predicate on the "enabled_channels" field.
func EnabledChannelsIsNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIsNull(FieldEnabledChannels))
}

// EnabledChannelsNotNil applies the NotNil predicate on the "enabled_channels" field.
func EnabledChannelsNotNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotNull(FieldEnabledChannels))
}

// NotificationEmailEQ applies the EQ predicate on the "notification_email" field.
func NotificationEmailEQ(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEQ(FieldNotificationEmail, v))
}

// NotificationEmailNEQ applies the NEQ predicate on the "notification_email" field.
func NotificationEmailNEQ(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNEQ(FieldNotificationEmail, v))
}

// NotificationEmailIn applies the In predicate on the "notification_email" field.
func NotificationEmailIn(vs ...string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIn(FieldNotificationEmail, vs...))
}

// NotificationEmailNotIn applies the NotIn predicate on the "notification_email" field.
func NotificationEmailNotIn(vs ...string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotIn(FieldNotificationEmail, vs...))
}

// NotificationEmailGT applies the GT predicate on the "notification_email" field.
func NotificationEmailGT(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGT(FieldNotificationEmail, v))
}

// NotificationEmailGTE applies the GTE predicate on the "notification_email" field.
func NotificationEmailGTE(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldGTE(FieldNotificationEmail, v))
}

// NotificationEmailLT applies the LT predicate on the "notification_email" field.
func NotificationEmailLT(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLT(FieldNotificationEmail, v))
}

// NotificationEmailLTE applies the LTE predicate on the "notification_email" field.
func NotificationEmailLTE(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldLTE(FieldNotificationEmail, v))
}

// NotificationEmailContains applies the Contains predicate on the "notification_email" field.
func NotificationEmailContains(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldContains(FieldNotificationEmail, v))
}

// NotificationEmailHasPrefix applies the HasPrefix predicate on the "notification_email" field.
func NotificationEmailHasPrefix(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldHasPrefix(FieldNotificationEmail, v))
}

// NotificationEmailHasSuffix applies the HasSuffix predicate on the "notification_email" field.
func NotificationEmailHasSuffix(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldHasSuffix(FieldNotificationEmail, v))
}

// NotificationEmailIsNil applies the IsNil predicate on the "notification_email" field.
func NotificationEmailIsNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIsNull(FieldNotificationEmail))
}

// NotificationEmailNotNil applies the NotNil predicate on the "notification_email" field.
func NotificationEmailNotNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotNull(FieldNotificationEmail))
}

// NotificationEmailEqualFold applies the EqualFold predicate on the "notification_email" field.
func NotificationEmailEqualFold(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldEqualFold(FieldNotificationEmail, v))
}

// NotificationEmailContainsFold applies the ContainsFold predicate on the "notification_email" field.
func NotificationEmailContainsFold(v string) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldContainsFold(FieldNotificationEmail, v))
}

// CustomSettingsIsNil applies the IsNil predicate on the "custom_settings" field.
func CustomSettingsIsNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldIsNull(FieldCustomSettings))
}

// CustomSettingsNotNil applies the NotNil predicate on the "custom_settings" field.
func CustomSettingsNotNil() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.FieldNotNull(FieldCustomSettings))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotificationType applies the HasEdge predicate on the "notification_type" edge.
func HasNotificationType() predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotificationTypeTable, NotificationTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationTypeWith applies the HasEdge predicate on the "notification_type" edge with a given conditions (other predicates).
func HasNotificationTypeWith(preds ...predicate.NotificationType) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(func(s *sql.Selector) {
		step := newNotificationTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserNotificationConfig) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserNotificationConfig) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserNotificationConfig) predicate.UserNotificationConfig {
	return predicate.UserNotificationConfig(sql.NotPredicates(p))
}
