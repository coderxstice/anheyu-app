// Code generated by ent, DO NOT EDIT.

package usernotificationconfig

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usernotificationconfig type in the database.
	Label = "user_notification_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldNotificationTypeID holds the string denoting the notification_type_id field in the database.
	FieldNotificationTypeID = "notification_type_id"
	// FieldIsEnabled holds the string denoting the is_enabled field in the database.
	FieldIsEnabled = "is_enabled"
	// FieldEnabledChannels holds the string denoting the enabled_channels field in the database.
	FieldEnabledChannels = "enabled_channels"
	// FieldNotificationEmail holds the string denoting the notification_email field in the database.
	FieldNotificationEmail = "notification_email"
	// FieldCustomSettings holds the string denoting the custom_settings field in the database.
	FieldCustomSettings = "custom_settings"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeNotificationType holds the string denoting the notification_type edge name in mutations.
	EdgeNotificationType = "notification_type"
	// Table holds the table name of the usernotificationconfig in the database.
	Table = "user_notification_configs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_notification_configs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// NotificationTypeTable is the table that holds the notification_type relation/edge.
	NotificationTypeTable = "user_notification_configs"
	// NotificationTypeInverseTable is the table name for the NotificationType entity.
	// It exists in this package in order to avoid circular dependency with the "notificationtype" package.
	NotificationTypeInverseTable = "notification_types"
	// NotificationTypeColumn is the table column denoting the notification_type relation/edge.
	NotificationTypeColumn = "notification_type_id"
)

// Columns holds all SQL columns for usernotificationconfig fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldNotificationTypeID,
	FieldIsEnabled,
	FieldEnabledChannels,
	FieldNotificationEmail,
	FieldCustomSettings,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsEnabled holds the default value on creation for the "is_enabled" field.
	DefaultIsEnabled bool
	// NotificationEmailValidator is a validator for the "notification_email" field. It is called by the builders before save.
	NotificationEmailValidator func(string) error
)

// OrderOption defines the ordering options for the UserNotificationConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByNotificationTypeID orders the results by the notification_type_id field.
func ByNotificationTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationTypeID, opts...).ToFunc()
}

// ByIsEnabled orders the results by the is_enabled field.
func ByIsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsEnabled, opts...).ToFunc()
}

// ByNotificationEmail orders the results by the notification_email field.
func ByNotificationEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotificationEmail, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotificationTypeField orders the results by notification_type field.
func ByNotificationTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newNotificationTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotificationTypeTable, NotificationTypeColumn),
	)
}
