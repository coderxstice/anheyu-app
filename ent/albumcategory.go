// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/albumcategory"
)

// AlbumCategory is the model entity for the AlbumCategory schema.
type AlbumCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// 分类名称
	Name string `json:"name,omitempty"`
	// 分类描述
	Description string `json:"description,omitempty"`
	// 显示顺序
	DisplayOrder int `json:"display_order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlbumCategoryQuery when eager-loading is set.
	Edges        AlbumCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AlbumCategoryEdges holds the relations/edges for other nodes in the graph.
type AlbumCategoryEdges struct {
	// Albums holds the value of the albums edge.
	Albums []*Album `json:"albums,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e AlbumCategoryEdges) AlbumsOrErr() ([]*Album, error) {
	if e.loadedTypes[0] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlbumCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case albumcategory.FieldID, albumcategory.FieldDisplayOrder:
			values[i] = new(sql.NullInt64)
		case albumcategory.FieldName, albumcategory.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlbumCategory fields.
func (_m *AlbumCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case albumcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case albumcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case albumcategory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case albumcategory.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				_m.DisplayOrder = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlbumCategory.
// This includes values selected through modifiers, order, etc.
func (_m *AlbumCategory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryAlbums queries the "albums" edge of the AlbumCategory entity.
func (_m *AlbumCategory) QueryAlbums() *AlbumQuery {
	return NewAlbumCategoryClient(_m.config).QueryAlbums(_m)
}

// Update returns a builder for updating this AlbumCategory.
// Note that you need to call AlbumCategory.Unwrap() before calling this method if this AlbumCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AlbumCategory) Update() *AlbumCategoryUpdateOne {
	return NewAlbumCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AlbumCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AlbumCategory) Unwrap() *AlbumCategory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlbumCategory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AlbumCategory) String() string {
	var builder strings.Builder
	builder.WriteString("AlbumCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", _m.DisplayOrder))
	builder.WriteByte(')')
	return builder.String()
}

// AlbumCategories is a parsable slice of AlbumCategory.
type AlbumCategories []*AlbumCategory
