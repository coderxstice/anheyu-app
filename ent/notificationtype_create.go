// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
	"github.com/anzhiyu-c/anheyu-app/ent/usernotificationconfig"
)

// NotificationTypeCreate is the builder for creating a NotificationType entity.
type NotificationTypeCreate struct {
	config
	mutation *NotificationTypeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *NotificationTypeCreate) SetCreatedAt(v time.Time) *NotificationTypeCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *NotificationTypeCreate) SetNillableCreatedAt(v *time.Time) *NotificationTypeCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NotificationTypeCreate) SetUpdatedAt(v time.Time) *NotificationTypeCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *NotificationTypeCreate) SetNillableUpdatedAt(v *time.Time) *NotificationTypeCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCode sets the "code" field.
func (_c *NotificationTypeCreate) SetCode(v string) *NotificationTypeCreate {
	_c.mutation.SetCode(v)
	return _c
}

// SetName sets the "name" field.
func (_c *NotificationTypeCreate) SetName(v string) *NotificationTypeCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *NotificationTypeCreate) SetDescription(v string) *NotificationTypeCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *NotificationTypeCreate) SetNillableDescription(v *string) *NotificationTypeCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *NotificationTypeCreate) SetCategory(v string) *NotificationTypeCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetIsActive sets the "is_active" field.
func (_c *NotificationTypeCreate) SetIsActive(v bool) *NotificationTypeCreate {
	_c.mutation.SetIsActive(v)
	return _c
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_c *NotificationTypeCreate) SetNillableIsActive(v *bool) *NotificationTypeCreate {
	if v != nil {
		_c.SetIsActive(*v)
	}
	return _c
}

// SetDefaultEnabled sets the "default_enabled" field.
func (_c *NotificationTypeCreate) SetDefaultEnabled(v bool) *NotificationTypeCreate {
	_c.mutation.SetDefaultEnabled(v)
	return _c
}

// SetNillableDefaultEnabled sets the "default_enabled" field if the given value is not nil.
func (_c *NotificationTypeCreate) SetNillableDefaultEnabled(v *bool) *NotificationTypeCreate {
	if v != nil {
		_c.SetDefaultEnabled(*v)
	}
	return _c
}

// SetSupportedChannels sets the "supported_channels" field.
func (_c *NotificationTypeCreate) SetSupportedChannels(v []string) *NotificationTypeCreate {
	_c.mutation.SetSupportedChannels(v)
	return _c
}

// SetID sets the "id" field.
func (_c *NotificationTypeCreate) SetID(v uint) *NotificationTypeCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddUserConfigIDs adds the "user_configs" edge to the UserNotificationConfig entity by IDs.
func (_c *NotificationTypeCreate) AddUserConfigIDs(ids ...uint) *NotificationTypeCreate {
	_c.mutation.AddUserConfigIDs(ids...)
	return _c
}

// AddUserConfigs adds the "user_configs" edges to the UserNotificationConfig entity.
func (_c *NotificationTypeCreate) AddUserConfigs(v ...*UserNotificationConfig) *NotificationTypeCreate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserConfigIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (_c *NotificationTypeCreate) Mutation() *NotificationTypeMutation {
	return _c.mutation
}

// Save creates the NotificationType in the database.
func (_c *NotificationTypeCreate) Save(ctx context.Context) (*NotificationType, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NotificationTypeCreate) SaveX(ctx context.Context) *NotificationType {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationTypeCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationTypeCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *NotificationTypeCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := notificationtype.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := notificationtype.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		v := notificationtype.DefaultIsActive
		_c.mutation.SetIsActive(v)
	}
	if _, ok := _c.mutation.DefaultEnabled(); !ok {
		v := notificationtype.DefaultDefaultEnabled
		_c.mutation.SetDefaultEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NotificationTypeCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NotificationType.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NotificationType.updated_at"`)}
	}
	if _, ok := _c.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "NotificationType.code"`)}
	}
	if v, ok := _c.mutation.Code(); ok {
		if err := notificationtype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationType.code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NotificationType.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := notificationtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationType.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Description(); ok {
		if err := notificationtype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "NotificationType.description": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "NotificationType.category"`)}
	}
	if v, ok := _c.mutation.Category(); ok {
		if err := notificationtype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "NotificationType.category": %w`, err)}
		}
	}
	if _, ok := _c.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "NotificationType.is_active"`)}
	}
	if _, ok := _c.mutation.DefaultEnabled(); !ok {
		return &ValidationError{Name: "default_enabled", err: errors.New(`ent: missing required field "NotificationType.default_enabled"`)}
	}
	return nil
}

func (_c *NotificationTypeCreate) sqlSave(ctx context.Context) (*NotificationType, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NotificationTypeCreate) createSpec() (*NotificationType, *sqlgraph.CreateSpec) {
	var (
		_node = &NotificationType{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(notificationtype.Table, sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(notificationtype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.Code(); ok {
		_spec.SetField(notificationtype.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(notificationtype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(notificationtype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(notificationtype.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.IsActive(); ok {
		_spec.SetField(notificationtype.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := _c.mutation.DefaultEnabled(); ok {
		_spec.SetField(notificationtype.FieldDefaultEnabled, field.TypeBool, value)
		_node.DefaultEnabled = value
	}
	if value, ok := _c.mutation.SupportedChannels(); ok {
		_spec.SetField(notificationtype.FieldSupportedChannels, field.TypeJSON, value)
		_node.SupportedChannels = value
	}
	if nodes := _c.mutation.UserConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationType.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationTypeCreate) OnConflict(opts ...sql.ConflictOption) *NotificationTypeUpsertOne {
	_c.conflict = opts
	return &NotificationTypeUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationTypeCreate) OnConflictColumns(columns ...string) *NotificationTypeUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationTypeUpsertOne{
		create: _c,
	}
}

type (
	// NotificationTypeUpsertOne is the builder for "upsert"-ing
	//  one NotificationType node.
	NotificationTypeUpsertOne struct {
		create *NotificationTypeCreate
	}

	// NotificationTypeUpsert is the "OnConflict" setter.
	NotificationTypeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTypeUpsert) SetUpdatedAt(v time.Time) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateUpdatedAt() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldUpdatedAt)
	return u
}

// SetCode sets the "code" field.
func (u *NotificationTypeUpsert) SetCode(v string) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateCode() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *NotificationTypeUpsert) SetName(v string) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateName() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *NotificationTypeUpsert) SetDescription(v string) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateDescription() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTypeUpsert) ClearDescription() *NotificationTypeUpsert {
	u.SetNull(notificationtype.FieldDescription)
	return u
}

// SetCategory sets the "category" field.
func (u *NotificationTypeUpsert) SetCategory(v string) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateCategory() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldCategory)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *NotificationTypeUpsert) SetIsActive(v bool) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateIsActive() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldIsActive)
	return u
}

// SetDefaultEnabled sets the "default_enabled" field.
func (u *NotificationTypeUpsert) SetDefaultEnabled(v bool) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldDefaultEnabled, v)
	return u
}

// UpdateDefaultEnabled sets the "default_enabled" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateDefaultEnabled() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldDefaultEnabled)
	return u
}

// SetSupportedChannels sets the "supported_channels" field.
func (u *NotificationTypeUpsert) SetSupportedChannels(v []string) *NotificationTypeUpsert {
	u.Set(notificationtype.FieldSupportedChannels, v)
	return u
}

// UpdateSupportedChannels sets the "supported_channels" field to the value that was provided on create.
func (u *NotificationTypeUpsert) UpdateSupportedChannels() *NotificationTypeUpsert {
	u.SetExcluded(notificationtype.FieldSupportedChannels)
	return u
}

// ClearSupportedChannels clears the value of the "supported_channels" field.
func (u *NotificationTypeUpsert) ClearSupportedChannels() *NotificationTypeUpsert {
	u.SetNull(notificationtype.FieldSupportedChannels)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationTypeUpsertOne) UpdateNewValues() *NotificationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(notificationtype.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(notificationtype.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NotificationTypeUpsertOne) Ignore() *NotificationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationTypeUpsertOne) DoNothing() *NotificationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationTypeCreate.OnConflict
// documentation for more info.
func (u *NotificationTypeUpsertOne) Update(set func(*NotificationTypeUpsert)) *NotificationTypeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTypeUpsertOne) SetUpdatedAt(v time.Time) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateUpdatedAt() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *NotificationTypeUpsertOne) SetCode(v string) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateCode() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *NotificationTypeUpsertOne) SetName(v string) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateName() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationTypeUpsertOne) SetDescription(v string) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateDescription() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTypeUpsertOne) ClearDescription() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.ClearDescription()
	})
}

// SetCategory sets the "category" field.
func (u *NotificationTypeUpsertOne) SetCategory(v string) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateCategory() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateCategory()
	})
}

// SetIsActive sets the "is_active" field.
func (u *NotificationTypeUpsertOne) SetIsActive(v bool) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateIsActive() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateIsActive()
	})
}

// SetDefaultEnabled sets the "default_enabled" field.
func (u *NotificationTypeUpsertOne) SetDefaultEnabled(v bool) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetDefaultEnabled(v)
	})
}

// UpdateDefaultEnabled sets the "default_enabled" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateDefaultEnabled() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateDefaultEnabled()
	})
}

// SetSupportedChannels sets the "supported_channels" field.
func (u *NotificationTypeUpsertOne) SetSupportedChannels(v []string) *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetSupportedChannels(v)
	})
}

// UpdateSupportedChannels sets the "supported_channels" field to the value that was provided on create.
func (u *NotificationTypeUpsertOne) UpdateSupportedChannels() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateSupportedChannels()
	})
}

// ClearSupportedChannels clears the value of the "supported_channels" field.
func (u *NotificationTypeUpsertOne) ClearSupportedChannels() *NotificationTypeUpsertOne {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.ClearSupportedChannels()
	})
}

// Exec executes the query.
func (u *NotificationTypeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationTypeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationTypeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NotificationTypeUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NotificationTypeUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NotificationTypeCreateBulk is the builder for creating many NotificationType entities in bulk.
type NotificationTypeCreateBulk struct {
	config
	err      error
	builders []*NotificationTypeCreate
	conflict []sql.ConflictOption
}

// Save creates the NotificationType entities in the database.
func (_c *NotificationTypeCreateBulk) Save(ctx context.Context) ([]*NotificationType, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NotificationType, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotificationTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NotificationTypeCreateBulk) SaveX(ctx context.Context) []*NotificationType {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NotificationTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NotificationTypeCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NotificationType.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NotificationTypeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *NotificationTypeCreateBulk) OnConflict(opts ...sql.ConflictOption) *NotificationTypeUpsertBulk {
	_c.conflict = opts
	return &NotificationTypeUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *NotificationTypeCreateBulk) OnConflictColumns(columns ...string) *NotificationTypeUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &NotificationTypeUpsertBulk{
		create: _c,
	}
}

// NotificationTypeUpsertBulk is the builder for "upsert"-ing
// a bulk of NotificationType nodes.
type NotificationTypeUpsertBulk struct {
	create *NotificationTypeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(notificationtype.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NotificationTypeUpsertBulk) UpdateNewValues() *NotificationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(notificationtype.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(notificationtype.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NotificationType.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NotificationTypeUpsertBulk) Ignore() *NotificationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NotificationTypeUpsertBulk) DoNothing() *NotificationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NotificationTypeCreateBulk.OnConflict
// documentation for more info.
func (u *NotificationTypeUpsertBulk) Update(set func(*NotificationTypeUpsert)) *NotificationTypeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NotificationTypeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *NotificationTypeUpsertBulk) SetUpdatedAt(v time.Time) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateUpdatedAt() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCode sets the "code" field.
func (u *NotificationTypeUpsertBulk) SetCode(v string) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateCode() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *NotificationTypeUpsertBulk) SetName(v string) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateName() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *NotificationTypeUpsertBulk) SetDescription(v string) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateDescription() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *NotificationTypeUpsertBulk) ClearDescription() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.ClearDescription()
	})
}

// SetCategory sets the "category" field.
func (u *NotificationTypeUpsertBulk) SetCategory(v string) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateCategory() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateCategory()
	})
}

// SetIsActive sets the "is_active" field.
func (u *NotificationTypeUpsertBulk) SetIsActive(v bool) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateIsActive() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateIsActive()
	})
}

// SetDefaultEnabled sets the "default_enabled" field.
func (u *NotificationTypeUpsertBulk) SetDefaultEnabled(v bool) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetDefaultEnabled(v)
	})
}

// UpdateDefaultEnabled sets the "default_enabled" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateDefaultEnabled() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateDefaultEnabled()
	})
}

// SetSupportedChannels sets the "supported_channels" field.
func (u *NotificationTypeUpsertBulk) SetSupportedChannels(v []string) *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.SetSupportedChannels(v)
	})
}

// UpdateSupportedChannels sets the "supported_channels" field to the value that was provided on create.
func (u *NotificationTypeUpsertBulk) UpdateSupportedChannels() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.UpdateSupportedChannels()
	})
}

// ClearSupportedChannels clears the value of the "supported_channels" field.
func (u *NotificationTypeUpsertBulk) ClearSupportedChannels() *NotificationTypeUpsertBulk {
	return u.Update(func(s *NotificationTypeUpsert) {
		s.ClearSupportedChannels()
	})
}

// Exec executes the query.
func (u *NotificationTypeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NotificationTypeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NotificationTypeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NotificationTypeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
