// Code generated by ent, DO NOT EDIT.

package userinstalledtheme

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the userinstalledtheme type in the database.
	Label = "user_installed_theme"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldThemeName holds the string denoting the theme_name field in the database.
	FieldThemeName = "theme_name"
	// FieldThemeMarketID holds the string denoting the theme_market_id field in the database.
	FieldThemeMarketID = "theme_market_id"
	// FieldIsCurrent holds the string denoting the is_current field in the database.
	FieldIsCurrent = "is_current"
	// FieldInstallTime holds the string denoting the install_time field in the database.
	FieldInstallTime = "install_time"
	// FieldUserThemeConfig holds the string denoting the user_theme_config field in the database.
	FieldUserThemeConfig = "user_theme_config"
	// FieldInstalledVersion holds the string denoting the installed_version field in the database.
	FieldInstalledVersion = "installed_version"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the userinstalledtheme in the database.
	Table = "user_installed_themes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_installed_themes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for userinstalledtheme fields.
var Columns = []string{
	FieldID,
	FieldDeletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldThemeName,
	FieldThemeMarketID,
	FieldIsCurrent,
	FieldInstallTime,
	FieldUserThemeConfig,
	FieldInstalledVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/anzhiyu-c/anheyu-app/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ThemeNameValidator is a validator for the "theme_name" field. It is called by the builders before save.
	ThemeNameValidator func(string) error
	// DefaultIsCurrent holds the default value on creation for the "is_current" field.
	DefaultIsCurrent bool
	// DefaultInstallTime holds the default value on creation for the "install_time" field.
	DefaultInstallTime func() time.Time
	// InstalledVersionValidator is a validator for the "installed_version" field. It is called by the builders before save.
	InstalledVersionValidator func(string) error
)

// OrderOption defines the ordering options for the UserInstalledTheme queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByThemeName orders the results by the theme_name field.
func ByThemeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeName, opts...).ToFunc()
}

// ByThemeMarketID orders the results by the theme_market_id field.
func ByThemeMarketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThemeMarketID, opts...).ToFunc()
}

// ByIsCurrent orders the results by the is_current field.
func ByIsCurrent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCurrent, opts...).ToFunc()
}

// ByInstallTime orders the results by the install_time field.
func ByInstallTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallTime, opts...).ToFunc()
}

// ByInstalledVersion orders the results by the installed_version field.
func ByInstalledVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstalledVersion, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
