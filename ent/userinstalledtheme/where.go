// Code generated by ent, DO NOT EDIT.

package userinstalledtheme

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldDeletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldUserID, v))
}

// ThemeName applies equality check predicate on the "theme_name" field. It's identical to ThemeNameEQ.
func ThemeName(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldThemeName, v))
}

// ThemeMarketID applies equality check predicate on the "theme_market_id" field. It's identical to ThemeMarketIDEQ.
func ThemeMarketID(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldThemeMarketID, v))
}

// IsCurrent applies equality check predicate on the "is_current" field. It's identical to IsCurrentEQ.
func IsCurrent(v bool) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldIsCurrent, v))
}

// InstallTime applies equality check predicate on the "install_time" field. It's identical to InstallTimeEQ.
func InstallTime(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldInstallTime, v))
}

// InstalledVersion applies equality check predicate on the "installed_version" field. It's identical to InstalledVersionEQ.
func InstalledVersion(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldInstalledVersion, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotNull(FieldDeletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldUserID, vs...))
}

// ThemeNameEQ applies the EQ predicate on the "theme_name" field.
func ThemeNameEQ(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldThemeName, v))
}

// ThemeNameNEQ applies the NEQ predicate on the "theme_name" field.
func ThemeNameNEQ(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldThemeName, v))
}

// ThemeNameIn applies the In predicate on the "theme_name" field.
func ThemeNameIn(vs ...string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldThemeName, vs...))
}

// ThemeNameNotIn applies the NotIn predicate on the "theme_name" field.
func ThemeNameNotIn(vs ...string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldThemeName, vs...))
}

// ThemeNameGT applies the GT predicate on the "theme_name" field.
func ThemeNameGT(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldThemeName, v))
}

// ThemeNameGTE applies the GTE predicate on the "theme_name" field.
func ThemeNameGTE(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldThemeName, v))
}

// ThemeNameLT applies the LT predicate on the "theme_name" field.
func ThemeNameLT(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldThemeName, v))
}

// ThemeNameLTE applies the LTE predicate on the "theme_name" field.
func ThemeNameLTE(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldThemeName, v))
}

// ThemeNameContains applies the Contains predicate on the "theme_name" field.
func ThemeNameContains(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldContains(FieldThemeName, v))
}

// ThemeNameHasPrefix applies the HasPrefix predicate on the "theme_name" field.
func ThemeNameHasPrefix(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldHasPrefix(FieldThemeName, v))
}

// ThemeNameHasSuffix applies the HasSuffix predicate on the "theme_name" field.
func ThemeNameHasSuffix(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldHasSuffix(FieldThemeName, v))
}

// ThemeNameEqualFold applies the EqualFold predicate on the "theme_name" field.
func ThemeNameEqualFold(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEqualFold(FieldThemeName, v))
}

// ThemeNameContainsFold applies the ContainsFold predicate on the "theme_name" field.
func ThemeNameContainsFold(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldContainsFold(FieldThemeName, v))
}

// ThemeMarketIDEQ applies the EQ predicate on the "theme_market_id" field.
func ThemeMarketIDEQ(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldThemeMarketID, v))
}

// ThemeMarketIDNEQ applies the NEQ predicate on the "theme_market_id" field.
func ThemeMarketIDNEQ(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldThemeMarketID, v))
}

// ThemeMarketIDIn applies the In predicate on the "theme_market_id" field.
func ThemeMarketIDIn(vs ...int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldThemeMarketID, vs...))
}

// ThemeMarketIDNotIn applies the NotIn predicate on the "theme_market_id" field.
func ThemeMarketIDNotIn(vs ...int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldThemeMarketID, vs...))
}

// ThemeMarketIDGT applies the GT predicate on the "theme_market_id" field.
func ThemeMarketIDGT(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldThemeMarketID, v))
}

// ThemeMarketIDGTE applies the GTE predicate on the "theme_market_id" field.
func ThemeMarketIDGTE(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldThemeMarketID, v))
}

// ThemeMarketIDLT applies the LT predicate on the "theme_market_id" field.
func ThemeMarketIDLT(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldThemeMarketID, v))
}

// ThemeMarketIDLTE applies the LTE predicate on the "theme_market_id" field.
func ThemeMarketIDLTE(v int) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldThemeMarketID, v))
}

// ThemeMarketIDIsNil applies the IsNil predicate on the "theme_market_id" field.
func ThemeMarketIDIsNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIsNull(FieldThemeMarketID))
}

// ThemeMarketIDNotNil applies the NotNil predicate on the "theme_market_id" field.
func ThemeMarketIDNotNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotNull(FieldThemeMarketID))
}

// IsCurrentEQ applies the EQ predicate on the "is_current" field.
func IsCurrentEQ(v bool) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldIsCurrent, v))
}

// IsCurrentNEQ applies the NEQ predicate on the "is_current" field.
func IsCurrentNEQ(v bool) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldIsCurrent, v))
}

// InstallTimeEQ applies the EQ predicate on the "install_time" field.
func InstallTimeEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldInstallTime, v))
}

// InstallTimeNEQ applies the NEQ predicate on the "install_time" field.
func InstallTimeNEQ(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldInstallTime, v))
}

// InstallTimeIn applies the In predicate on the "install_time" field.
func InstallTimeIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldInstallTime, vs...))
}

// InstallTimeNotIn applies the NotIn predicate on the "install_time" field.
func InstallTimeNotIn(vs ...time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldInstallTime, vs...))
}

// InstallTimeGT applies the GT predicate on the "install_time" field.
func InstallTimeGT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldInstallTime, v))
}

// InstallTimeGTE applies the GTE predicate on the "install_time" field.
func InstallTimeGTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldInstallTime, v))
}

// InstallTimeLT applies the LT predicate on the "install_time" field.
func InstallTimeLT(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldInstallTime, v))
}

// InstallTimeLTE applies the LTE predicate on the "install_time" field.
func InstallTimeLTE(v time.Time) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldInstallTime, v))
}

// UserThemeConfigIsNil applies the IsNil predicate on the "user_theme_config" field.
func UserThemeConfigIsNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIsNull(FieldUserThemeConfig))
}

// UserThemeConfigNotNil applies the NotNil predicate on the "user_theme_config" field.
func UserThemeConfigNotNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotNull(FieldUserThemeConfig))
}

// InstalledVersionEQ applies the EQ predicate on the "installed_version" field.
func InstalledVersionEQ(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEQ(FieldInstalledVersion, v))
}

// InstalledVersionNEQ applies the NEQ predicate on the "installed_version" field.
func InstalledVersionNEQ(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNEQ(FieldInstalledVersion, v))
}

// InstalledVersionIn applies the In predicate on the "installed_version" field.
func InstalledVersionIn(vs ...string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIn(FieldInstalledVersion, vs...))
}

// InstalledVersionNotIn applies the NotIn predicate on the "installed_version" field.
func InstalledVersionNotIn(vs ...string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotIn(FieldInstalledVersion, vs...))
}

// InstalledVersionGT applies the GT predicate on the "installed_version" field.
func InstalledVersionGT(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGT(FieldInstalledVersion, v))
}

// InstalledVersionGTE applies the GTE predicate on the "installed_version" field.
func InstalledVersionGTE(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldGTE(FieldInstalledVersion, v))
}

// InstalledVersionLT applies the LT predicate on the "installed_version" field.
func InstalledVersionLT(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLT(FieldInstalledVersion, v))
}

// InstalledVersionLTE applies the LTE predicate on the "installed_version" field.
func InstalledVersionLTE(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldLTE(FieldInstalledVersion, v))
}

// InstalledVersionContains applies the Contains predicate on the "installed_version" field.
func InstalledVersionContains(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldContains(FieldInstalledVersion, v))
}

// InstalledVersionHasPrefix applies the HasPrefix predicate on the "installed_version" field.
func InstalledVersionHasPrefix(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldHasPrefix(FieldInstalledVersion, v))
}

// InstalledVersionHasSuffix applies the HasSuffix predicate on the "installed_version" field.
func InstalledVersionHasSuffix(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldHasSuffix(FieldInstalledVersion, v))
}

// InstalledVersionIsNil applies the IsNil predicate on the "installed_version" field.
func InstalledVersionIsNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldIsNull(FieldInstalledVersion))
}

// InstalledVersionNotNil applies the NotNil predicate on the "installed_version" field.
func InstalledVersionNotNil() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldNotNull(FieldInstalledVersion))
}

// InstalledVersionEqualFold applies the EqualFold predicate on the "installed_version" field.
func InstalledVersionEqualFold(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldEqualFold(FieldInstalledVersion, v))
}

// InstalledVersionContainsFold applies the ContainsFold predicate on the "installed_version" field.
func InstalledVersionContainsFold(v string) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.FieldContainsFold(FieldInstalledVersion, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserInstalledTheme) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserInstalledTheme) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserInstalledTheme) predicate.UserInstalledTheme {
	return predicate.UserInstalledTheme(sql.NotPredicates(p))
}
