// Code generated by ent, DO NOT EDIT.

package page

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldID, id))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldDeletedAt, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldTitle, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPath, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldContent, v))
}

// MarkdownContent applies equality check predicate on the "markdown_content" field. It's identical to MarkdownContentEQ.
func MarkdownContent(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldMarkdownContent, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldDescription, v))
}

// IsPublished applies equality check predicate on the "is_published" field. It's identical to IsPublishedEQ.
func IsPublished(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIsPublished, v))
}

// ShowComment applies equality check predicate on the "show_comment" field. It's identical to ShowCommentEQ.
func ShowComment(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldShowComment, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSort, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldDeletedAt))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldTitle, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldPath, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldContent, v))
}

// MarkdownContentEQ applies the EQ predicate on the "markdown_content" field.
func MarkdownContentEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldMarkdownContent, v))
}

// MarkdownContentNEQ applies the NEQ predicate on the "markdown_content" field.
func MarkdownContentNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldMarkdownContent, v))
}

// MarkdownContentIn applies the In predicate on the "markdown_content" field.
func MarkdownContentIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldMarkdownContent, vs...))
}

// MarkdownContentNotIn applies the NotIn predicate on the "markdown_content" field.
func MarkdownContentNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldMarkdownContent, vs...))
}

// MarkdownContentGT applies the GT predicate on the "markdown_content" field.
func MarkdownContentGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldMarkdownContent, v))
}

// MarkdownContentGTE applies the GTE predicate on the "markdown_content" field.
func MarkdownContentGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldMarkdownContent, v))
}

// MarkdownContentLT applies the LT predicate on the "markdown_content" field.
func MarkdownContentLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldMarkdownContent, v))
}

// MarkdownContentLTE applies the LTE predicate on the "markdown_content" field.
func MarkdownContentLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldMarkdownContent, v))
}

// MarkdownContentContains applies the Contains predicate on the "markdown_content" field.
func MarkdownContentContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldMarkdownContent, v))
}

// MarkdownContentHasPrefix applies the HasPrefix predicate on the "markdown_content" field.
func MarkdownContentHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldMarkdownContent, v))
}

// MarkdownContentHasSuffix applies the HasSuffix predicate on the "markdown_content" field.
func MarkdownContentHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldMarkdownContent, v))
}

// MarkdownContentEqualFold applies the EqualFold predicate on the "markdown_content" field.
func MarkdownContentEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldMarkdownContent, v))
}

// MarkdownContentContainsFold applies the ContainsFold predicate on the "markdown_content" field.
func MarkdownContentContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldMarkdownContent, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Page {
	return predicate.Page(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Page {
	return predicate.Page(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Page {
	return predicate.Page(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Page {
	return predicate.Page(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Page {
	return predicate.Page(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Page {
	return predicate.Page(sql.FieldContainsFold(FieldDescription, v))
}

// IsPublishedEQ applies the EQ predicate on the "is_published" field.
func IsPublishedEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldIsPublished, v))
}

// IsPublishedNEQ applies the NEQ predicate on the "is_published" field.
func IsPublishedNEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldIsPublished, v))
}

// ShowCommentEQ applies the EQ predicate on the "show_comment" field.
func ShowCommentEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldShowComment, v))
}

// ShowCommentNEQ applies the NEQ predicate on the "show_comment" field.
func ShowCommentNEQ(v bool) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldShowComment, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldSort, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Page {
	return predicate.Page(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Page {
	return predicate.Page(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Page) predicate.Page {
	return predicate.Page(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Page) predicate.Page {
	return predicate.Page(sql.NotPredicates(p))
}
