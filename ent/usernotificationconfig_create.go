// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
	"github.com/anzhiyu-c/anheyu-app/ent/user"
	"github.com/anzhiyu-c/anheyu-app/ent/usernotificationconfig"
)

// UserNotificationConfigCreate is the builder for creating a UserNotificationConfig entity.
type UserNotificationConfigCreate struct {
	config
	mutation *UserNotificationConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserNotificationConfigCreate) SetCreatedAt(v time.Time) *UserNotificationConfigCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserNotificationConfigCreate) SetNillableCreatedAt(v *time.Time) *UserNotificationConfigCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *UserNotificationConfigCreate) SetUpdatedAt(v time.Time) *UserNotificationConfigCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *UserNotificationConfigCreate) SetNillableUpdatedAt(v *time.Time) *UserNotificationConfigCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *UserNotificationConfigCreate) SetUserID(v uint) *UserNotificationConfigCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (_c *UserNotificationConfigCreate) SetNotificationTypeID(v uint) *UserNotificationConfigCreate {
	_c.mutation.SetNotificationTypeID(v)
	return _c
}

// SetIsEnabled sets the "is_enabled" field.
func (_c *UserNotificationConfigCreate) SetIsEnabled(v bool) *UserNotificationConfigCreate {
	_c.mutation.SetIsEnabled(v)
	return _c
}

// SetNillableIsEnabled sets the "is_enabled" field if the given value is not nil.
func (_c *UserNotificationConfigCreate) SetNillableIsEnabled(v *bool) *UserNotificationConfigCreate {
	if v != nil {
		_c.SetIsEnabled(*v)
	}
	return _c
}

// SetEnabledChannels sets the "enabled_channels" field.
func (_c *UserNotificationConfigCreate) SetEnabledChannels(v []string) *UserNotificationConfigCreate {
	_c.mutation.SetEnabledChannels(v)
	return _c
}

// SetNotificationEmail sets the "notification_email" field.
func (_c *UserNotificationConfigCreate) SetNotificationEmail(v string) *UserNotificationConfigCreate {
	_c.mutation.SetNotificationEmail(v)
	return _c
}

// SetNillableNotificationEmail sets the "notification_email" field if the given value is not nil.
func (_c *UserNotificationConfigCreate) SetNillableNotificationEmail(v *string) *UserNotificationConfigCreate {
	if v != nil {
		_c.SetNotificationEmail(*v)
	}
	return _c
}

// SetCustomSettings sets the "custom_settings" field.
func (_c *UserNotificationConfigCreate) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigCreate {
	_c.mutation.SetCustomSettings(v)
	return _c
}

// SetID sets the "id" field.
func (_c *UserNotificationConfigCreate) SetID(v uint) *UserNotificationConfigCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserNotificationConfigCreate) SetUser(v *User) *UserNotificationConfigCreate {
	return _c.SetUserID(v.ID)
}

// SetNotificationType sets the "notification_type" edge to the NotificationType entity.
func (_c *UserNotificationConfigCreate) SetNotificationType(v *NotificationType) *UserNotificationConfigCreate {
	return _c.SetNotificationTypeID(v.ID)
}

// Mutation returns the UserNotificationConfigMutation object of the builder.
func (_c *UserNotificationConfigCreate) Mutation() *UserNotificationConfigMutation {
	return _c.mutation
}

// Save creates the UserNotificationConfig in the database.
func (_c *UserNotificationConfigCreate) Save(ctx context.Context) (*UserNotificationConfig, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserNotificationConfigCreate) SaveX(ctx context.Context) *UserNotificationConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserNotificationConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserNotificationConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserNotificationConfigCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := usernotificationconfig.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := usernotificationconfig.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.IsEnabled(); !ok {
		v := usernotificationconfig.DefaultIsEnabled
		_c.mutation.SetIsEnabled(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserNotificationConfigCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserNotificationConfig.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserNotificationConfig.updated_at"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserNotificationConfig.user_id"`)}
	}
	if _, ok := _c.mutation.NotificationTypeID(); !ok {
		return &ValidationError{Name: "notification_type_id", err: errors.New(`ent: missing required field "UserNotificationConfig.notification_type_id"`)}
	}
	if _, ok := _c.mutation.IsEnabled(); !ok {
		return &ValidationError{Name: "is_enabled", err: errors.New(`ent: missing required field "UserNotificationConfig.is_enabled"`)}
	}
	if v, ok := _c.mutation.NotificationEmail(); ok {
		if err := usernotificationconfig.NotificationEmailValidator(v); err != nil {
			return &ValidationError{Name: "notification_email", err: fmt.Errorf(`ent: validator failed for field "UserNotificationConfig.notification_email": %w`, err)}
		}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserNotificationConfig.user"`)}
	}
	if len(_c.mutation.NotificationTypeIDs()) == 0 {
		return &ValidationError{Name: "notification_type", err: errors.New(`ent: missing required edge "UserNotificationConfig.notification_type"`)}
	}
	return nil
}

func (_c *UserNotificationConfigCreate) sqlSave(ctx context.Context) (*UserNotificationConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserNotificationConfigCreate) createSpec() (*UserNotificationConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &UserNotificationConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(usernotificationconfig.Table, sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(usernotificationconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(usernotificationconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.IsEnabled(); ok {
		_spec.SetField(usernotificationconfig.FieldIsEnabled, field.TypeBool, value)
		_node.IsEnabled = value
	}
	if value, ok := _c.mutation.EnabledChannels(); ok {
		_spec.SetField(usernotificationconfig.FieldEnabledChannels, field.TypeJSON, value)
		_node.EnabledChannels = value
	}
	if value, ok := _c.mutation.NotificationEmail(); ok {
		_spec.SetField(usernotificationconfig.FieldNotificationEmail, field.TypeString, value)
		_node.NotificationEmail = value
	}
	if value, ok := _c.mutation.CustomSettings(); ok {
		_spec.SetField(usernotificationconfig.FieldCustomSettings, field.TypeJSON, value)
		_node.CustomSettings = value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.UserTable,
			Columns: []string{usernotificationconfig.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NotificationTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   usernotificationconfig.NotificationTypeTable,
			Columns: []string{usernotificationconfig.NotificationTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NotificationTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserNotificationConfigCreate) OnConflict(opts ...sql.ConflictOption) *UserNotificationConfigUpsertOne {
	_c.conflict = opts
	return &UserNotificationConfigUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserNotificationConfigCreate) OnConflictColumns(columns ...string) *UserNotificationConfigUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationConfigUpsertOne{
		create: _c,
	}
}

type (
	// UserNotificationConfigUpsertOne is the builder for "upsert"-ing
	//  one UserNotificationConfig node.
	UserNotificationConfigUpsertOne struct {
		create *UserNotificationConfigCreate
	}

	// UserNotificationConfigUpsert is the "OnConflict" setter.
	UserNotificationConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationConfigUpsert) SetUpdatedAt(v time.Time) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateUpdatedAt() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserNotificationConfigUpsert) SetUserID(v uint) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateUserID() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldUserID)
	return u
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (u *UserNotificationConfigUpsert) SetNotificationTypeID(v uint) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldNotificationTypeID, v)
	return u
}

// UpdateNotificationTypeID sets the "notification_type_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateNotificationTypeID() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldNotificationTypeID)
	return u
}

// SetIsEnabled sets the "is_enabled" field.
func (u *UserNotificationConfigUpsert) SetIsEnabled(v bool) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldIsEnabled, v)
	return u
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateIsEnabled() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldIsEnabled)
	return u
}

// SetEnabledChannels sets the "enabled_channels" field.
func (u *UserNotificationConfigUpsert) SetEnabledChannels(v []string) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldEnabledChannels, v)
	return u
}

// UpdateEnabledChannels sets the "enabled_channels" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateEnabledChannels() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldEnabledChannels)
	return u
}

// ClearEnabledChannels clears the value of the "enabled_channels" field.
func (u *UserNotificationConfigUpsert) ClearEnabledChannels() *UserNotificationConfigUpsert {
	u.SetNull(usernotificationconfig.FieldEnabledChannels)
	return u
}

// SetNotificationEmail sets the "notification_email" field.
func (u *UserNotificationConfigUpsert) SetNotificationEmail(v string) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldNotificationEmail, v)
	return u
}

// UpdateNotificationEmail sets the "notification_email" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateNotificationEmail() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldNotificationEmail)
	return u
}

// ClearNotificationEmail clears the value of the "notification_email" field.
func (u *UserNotificationConfigUpsert) ClearNotificationEmail() *UserNotificationConfigUpsert {
	u.SetNull(usernotificationconfig.FieldNotificationEmail)
	return u
}

// SetCustomSettings sets the "custom_settings" field.
func (u *UserNotificationConfigUpsert) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigUpsert {
	u.Set(usernotificationconfig.FieldCustomSettings, v)
	return u
}

// UpdateCustomSettings sets the "custom_settings" field to the value that was provided on create.
func (u *UserNotificationConfigUpsert) UpdateCustomSettings() *UserNotificationConfigUpsert {
	u.SetExcluded(usernotificationconfig.FieldCustomSettings)
	return u
}

// ClearCustomSettings clears the value of the "custom_settings" field.
func (u *UserNotificationConfigUpsert) ClearCustomSettings() *UserNotificationConfigUpsert {
	u.SetNull(usernotificationconfig.FieldCustomSettings)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usernotificationconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserNotificationConfigUpsertOne) UpdateNewValues() *UserNotificationConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usernotificationconfig.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(usernotificationconfig.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserNotificationConfigUpsertOne) Ignore() *UserNotificationConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationConfigUpsertOne) DoNothing() *UserNotificationConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationConfigCreate.OnConflict
// documentation for more info.
func (u *UserNotificationConfigUpsertOne) Update(set func(*UserNotificationConfigUpsert)) *UserNotificationConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationConfigUpsertOne) SetUpdatedAt(v time.Time) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateUpdatedAt() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserNotificationConfigUpsertOne) SetUserID(v uint) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateUserID() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateUserID()
	})
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (u *UserNotificationConfigUpsertOne) SetNotificationTypeID(v uint) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetNotificationTypeID(v)
	})
}

// UpdateNotificationTypeID sets the "notification_type_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateNotificationTypeID() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateNotificationTypeID()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *UserNotificationConfigUpsertOne) SetIsEnabled(v bool) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateIsEnabled() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateIsEnabled()
	})
}

// SetEnabledChannels sets the "enabled_channels" field.
func (u *UserNotificationConfigUpsertOne) SetEnabledChannels(v []string) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetEnabledChannels(v)
	})
}

// UpdateEnabledChannels sets the "enabled_channels" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateEnabledChannels() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateEnabledChannels()
	})
}

// ClearEnabledChannels clears the value of the "enabled_channels" field.
func (u *UserNotificationConfigUpsertOne) ClearEnabledChannels() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearEnabledChannels()
	})
}

// SetNotificationEmail sets the "notification_email" field.
func (u *UserNotificationConfigUpsertOne) SetNotificationEmail(v string) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetNotificationEmail(v)
	})
}

// UpdateNotificationEmail sets the "notification_email" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateNotificationEmail() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateNotificationEmail()
	})
}

// ClearNotificationEmail clears the value of the "notification_email" field.
func (u *UserNotificationConfigUpsertOne) ClearNotificationEmail() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearNotificationEmail()
	})
}

// SetCustomSettings sets the "custom_settings" field.
func (u *UserNotificationConfigUpsertOne) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetCustomSettings(v)
	})
}

// UpdateCustomSettings sets the "custom_settings" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertOne) UpdateCustomSettings() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateCustomSettings()
	})
}

// ClearCustomSettings clears the value of the "custom_settings" field.
func (u *UserNotificationConfigUpsertOne) ClearCustomSettings() *UserNotificationConfigUpsertOne {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearCustomSettings()
	})
}

// Exec executes the query.
func (u *UserNotificationConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserNotificationConfigUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserNotificationConfigUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserNotificationConfigCreateBulk is the builder for creating many UserNotificationConfig entities in bulk.
type UserNotificationConfigCreateBulk struct {
	config
	err      error
	builders []*UserNotificationConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the UserNotificationConfig entities in the database.
func (_c *UserNotificationConfigCreateBulk) Save(ctx context.Context) ([]*UserNotificationConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserNotificationConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserNotificationConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserNotificationConfigCreateBulk) SaveX(ctx context.Context) []*UserNotificationConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserNotificationConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserNotificationConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserNotificationConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserNotificationConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *UserNotificationConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserNotificationConfigUpsertBulk {
	_c.conflict = opts
	return &UserNotificationConfigUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *UserNotificationConfigCreateBulk) OnConflictColumns(columns ...string) *UserNotificationConfigUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &UserNotificationConfigUpsertBulk{
		create: _c,
	}
}

// UserNotificationConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of UserNotificationConfig nodes.
type UserNotificationConfigUpsertBulk struct {
	create *UserNotificationConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usernotificationconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserNotificationConfigUpsertBulk) UpdateNewValues() *UserNotificationConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usernotificationconfig.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(usernotificationconfig.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserNotificationConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserNotificationConfigUpsertBulk) Ignore() *UserNotificationConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserNotificationConfigUpsertBulk) DoNothing() *UserNotificationConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserNotificationConfigCreateBulk.OnConflict
// documentation for more info.
func (u *UserNotificationConfigUpsertBulk) Update(set func(*UserNotificationConfigUpsert)) *UserNotificationConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserNotificationConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserNotificationConfigUpsertBulk) SetUpdatedAt(v time.Time) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateUpdatedAt() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserNotificationConfigUpsertBulk) SetUserID(v uint) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateUserID() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateUserID()
	})
}

// SetNotificationTypeID sets the "notification_type_id" field.
func (u *UserNotificationConfigUpsertBulk) SetNotificationTypeID(v uint) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetNotificationTypeID(v)
	})
}

// UpdateNotificationTypeID sets the "notification_type_id" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateNotificationTypeID() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateNotificationTypeID()
	})
}

// SetIsEnabled sets the "is_enabled" field.
func (u *UserNotificationConfigUpsertBulk) SetIsEnabled(v bool) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetIsEnabled(v)
	})
}

// UpdateIsEnabled sets the "is_enabled" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateIsEnabled() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateIsEnabled()
	})
}

// SetEnabledChannels sets the "enabled_channels" field.
func (u *UserNotificationConfigUpsertBulk) SetEnabledChannels(v []string) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetEnabledChannels(v)
	})
}

// UpdateEnabledChannels sets the "enabled_channels" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateEnabledChannels() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateEnabledChannels()
	})
}

// ClearEnabledChannels clears the value of the "enabled_channels" field.
func (u *UserNotificationConfigUpsertBulk) ClearEnabledChannels() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearEnabledChannels()
	})
}

// SetNotificationEmail sets the "notification_email" field.
func (u *UserNotificationConfigUpsertBulk) SetNotificationEmail(v string) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetNotificationEmail(v)
	})
}

// UpdateNotificationEmail sets the "notification_email" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateNotificationEmail() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateNotificationEmail()
	})
}

// ClearNotificationEmail clears the value of the "notification_email" field.
func (u *UserNotificationConfigUpsertBulk) ClearNotificationEmail() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearNotificationEmail()
	})
}

// SetCustomSettings sets the "custom_settings" field.
func (u *UserNotificationConfigUpsertBulk) SetCustomSettings(v map[string]interface{}) *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.SetCustomSettings(v)
	})
}

// UpdateCustomSettings sets the "custom_settings" field to the value that was provided on create.
func (u *UserNotificationConfigUpsertBulk) UpdateCustomSettings() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.UpdateCustomSettings()
	})
}

// ClearCustomSettings clears the value of the "custom_settings" field.
func (u *UserNotificationConfigUpsertBulk) ClearCustomSettings() *UserNotificationConfigUpsertBulk {
	return u.Update(func(s *UserNotificationConfigUpsert) {
		s.ClearCustomSettings()
	})
}

// Exec executes the query.
func (u *UserNotificationConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserNotificationConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserNotificationConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserNotificationConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
