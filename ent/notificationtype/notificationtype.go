// Code generated by ent, DO NOT EDIT.

package notificationtype

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notificationtype type in the database.
	Label = "notification_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldDefaultEnabled holds the string denoting the default_enabled field in the database.
	FieldDefaultEnabled = "default_enabled"
	// FieldSupportedChannels holds the string denoting the supported_channels field in the database.
	FieldSupportedChannels = "supported_channels"
	// EdgeUserConfigs holds the string denoting the user_configs edge name in mutations.
	EdgeUserConfigs = "user_configs"
	// Table holds the table name of the notificationtype in the database.
	Table = "notification_types"
	// UserConfigsTable is the table that holds the user_configs relation/edge.
	UserConfigsTable = "user_notification_configs"
	// UserConfigsInverseTable is the table name for the UserNotificationConfig entity.
	// It exists in this package in order to avoid circular dependency with the "usernotificationconfig" package.
	UserConfigsInverseTable = "user_notification_configs"
	// UserConfigsColumn is the table column denoting the user_configs relation/edge.
	UserConfigsColumn = "notification_type_id"
)

// Columns holds all SQL columns for notificationtype fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCode,
	FieldName,
	FieldDescription,
	FieldCategory,
	FieldIsActive,
	FieldDefaultEnabled,
	FieldSupportedChannels,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultDefaultEnabled holds the default value on creation for the "default_enabled" field.
	DefaultDefaultEnabled bool
)

// OrderOption defines the ordering options for the NotificationType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByDefaultEnabled orders the results by the default_enabled field.
func ByDefaultEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultEnabled, opts...).ToFunc()
}

// ByUserConfigsCount orders the results by user_configs count.
func ByUserConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserConfigsStep(), opts...)
	}
}

// ByUserConfigs orders the results by user_configs terms.
func ByUserConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserConfigsTable, UserConfigsColumn),
	)
}
