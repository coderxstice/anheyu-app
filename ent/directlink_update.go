// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/directlink"
	"github.com/anzhiyu-c/anheyu-app/ent/file"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
)

// DirectLinkUpdate is the builder for updating DirectLink entities.
type DirectLinkUpdate struct {
	config
	hooks     []Hook
	mutation  *DirectLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DirectLinkUpdate builder.
func (_u *DirectLinkUpdate) Where(ps ...predicate.DirectLink) *DirectLinkUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DirectLinkUpdate) SetDeletedAt(v time.Time) *DirectLinkUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DirectLinkUpdate) SetNillableDeletedAt(v *time.Time) *DirectLinkUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DirectLinkUpdate) ClearDeletedAt() *DirectLinkUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DirectLinkUpdate) SetUpdatedAt(v time.Time) *DirectLinkUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *DirectLinkUpdate) SetFileID(v uint) *DirectLinkUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *DirectLinkUpdate) SetNillableFileID(v *uint) *DirectLinkUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *DirectLinkUpdate) SetFileName(v string) *DirectLinkUpdate {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *DirectLinkUpdate) SetNillableFileName(v *string) *DirectLinkUpdate {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetSpeedLimit sets the "speed_limit" field.
func (_u *DirectLinkUpdate) SetSpeedLimit(v int64) *DirectLinkUpdate {
	_u.mutation.ResetSpeedLimit()
	_u.mutation.SetSpeedLimit(v)
	return _u
}

// SetNillableSpeedLimit sets the "speed_limit" field if the given value is not nil.
func (_u *DirectLinkUpdate) SetNillableSpeedLimit(v *int64) *DirectLinkUpdate {
	if v != nil {
		_u.SetSpeedLimit(*v)
	}
	return _u
}

// AddSpeedLimit adds value to the "speed_limit" field.
func (_u *DirectLinkUpdate) AddSpeedLimit(v int64) *DirectLinkUpdate {
	_u.mutation.AddSpeedLimit(v)
	return _u
}

// SetDownloads sets the "downloads" field.
func (_u *DirectLinkUpdate) SetDownloads(v int64) *DirectLinkUpdate {
	_u.mutation.ResetDownloads()
	_u.mutation.SetDownloads(v)
	return _u
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (_u *DirectLinkUpdate) SetNillableDownloads(v *int64) *DirectLinkUpdate {
	if v != nil {
		_u.SetDownloads(*v)
	}
	return _u
}

// AddDownloads adds value to the "downloads" field.
func (_u *DirectLinkUpdate) AddDownloads(v int64) *DirectLinkUpdate {
	_u.mutation.AddDownloads(v)
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *DirectLinkUpdate) SetFile(v *File) *DirectLinkUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the DirectLinkMutation object of the builder.
func (_u *DirectLinkUpdate) Mutation() *DirectLinkMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *DirectLinkUpdate) ClearFile() *DirectLinkUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DirectLinkUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DirectLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DirectLinkUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DirectLinkUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DirectLinkUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if directlink.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized directlink.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := directlink.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *DirectLinkUpdate) check() error {
	if v, ok := _u.mutation.FileName(); ok {
		if err := directlink.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "DirectLink.file_name": %w`, err)}
		}
	}
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DirectLink.file"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DirectLinkUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectLinkUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DirectLinkUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(directlink.Table, directlink.Columns, sqlgraph.NewFieldSpec(directlink.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(directlink.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(directlink.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(directlink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(directlink.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SpeedLimit(); ok {
		_spec.SetField(directlink.FieldSpeedLimit, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSpeedLimit(); ok {
		_spec.AddField(directlink.FieldSpeedLimit, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Downloads(); ok {
		_spec.SetField(directlink.FieldDownloads, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDownloads(); ok {
		_spec.AddField(directlink.FieldDownloads, field.TypeInt64, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   directlink.FileTable,
			Columns: []string{directlink.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   directlink.FileTable,
			Columns: []string{directlink.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DirectLinkUpdateOne is the builder for updating a single DirectLink entity.
type DirectLinkUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DirectLinkMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *DirectLinkUpdateOne) SetDeletedAt(v time.Time) *DirectLinkUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *DirectLinkUpdateOne) SetNillableDeletedAt(v *time.Time) *DirectLinkUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *DirectLinkUpdateOne) ClearDeletedAt() *DirectLinkUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *DirectLinkUpdateOne) SetUpdatedAt(v time.Time) *DirectLinkUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *DirectLinkUpdateOne) SetFileID(v uint) *DirectLinkUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *DirectLinkUpdateOne) SetNillableFileID(v *uint) *DirectLinkUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *DirectLinkUpdateOne) SetFileName(v string) *DirectLinkUpdateOne {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *DirectLinkUpdateOne) SetNillableFileName(v *string) *DirectLinkUpdateOne {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// SetSpeedLimit sets the "speed_limit" field.
func (_u *DirectLinkUpdateOne) SetSpeedLimit(v int64) *DirectLinkUpdateOne {
	_u.mutation.ResetSpeedLimit()
	_u.mutation.SetSpeedLimit(v)
	return _u
}

// SetNillableSpeedLimit sets the "speed_limit" field if the given value is not nil.
func (_u *DirectLinkUpdateOne) SetNillableSpeedLimit(v *int64) *DirectLinkUpdateOne {
	if v != nil {
		_u.SetSpeedLimit(*v)
	}
	return _u
}

// AddSpeedLimit adds value to the "speed_limit" field.
func (_u *DirectLinkUpdateOne) AddSpeedLimit(v int64) *DirectLinkUpdateOne {
	_u.mutation.AddSpeedLimit(v)
	return _u
}

// SetDownloads sets the "downloads" field.
func (_u *DirectLinkUpdateOne) SetDownloads(v int64) *DirectLinkUpdateOne {
	_u.mutation.ResetDownloads()
	_u.mutation.SetDownloads(v)
	return _u
}

// SetNillableDownloads sets the "downloads" field if the given value is not nil.
func (_u *DirectLinkUpdateOne) SetNillableDownloads(v *int64) *DirectLinkUpdateOne {
	if v != nil {
		_u.SetDownloads(*v)
	}
	return _u
}

// AddDownloads adds value to the "downloads" field.
func (_u *DirectLinkUpdateOne) AddDownloads(v int64) *DirectLinkUpdateOne {
	_u.mutation.AddDownloads(v)
	return _u
}

// SetFile sets the "file" edge to the File entity.
func (_u *DirectLinkUpdateOne) SetFile(v *File) *DirectLinkUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the DirectLinkMutation object of the builder.
func (_u *DirectLinkUpdateOne) Mutation() *DirectLinkMutation {
	return _u.mutation
}

// ClearFile clears the "file" edge to the File entity.
func (_u *DirectLinkUpdateOne) ClearFile() *DirectLinkUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the DirectLinkUpdate builder.
func (_u *DirectLinkUpdateOne) Where(ps ...predicate.DirectLink) *DirectLinkUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DirectLinkUpdateOne) Select(field string, fields ...string) *DirectLinkUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated DirectLink entity.
func (_u *DirectLinkUpdateOne) Save(ctx context.Context) (*DirectLink, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DirectLinkUpdateOne) SaveX(ctx context.Context) *DirectLink {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DirectLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DirectLinkUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *DirectLinkUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if directlink.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized directlink.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := directlink.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *DirectLinkUpdateOne) check() error {
	if v, ok := _u.mutation.FileName(); ok {
		if err := directlink.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "DirectLink.file_name": %w`, err)}
		}
	}
	if _u.mutation.FileCleared() && len(_u.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DirectLink.file"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *DirectLinkUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DirectLinkUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *DirectLinkUpdateOne) sqlSave(ctx context.Context) (_node *DirectLink, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(directlink.Table, directlink.Columns, sqlgraph.NewFieldSpec(directlink.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DirectLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, directlink.FieldID)
		for _, f := range fields {
			if !directlink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != directlink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(directlink.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(directlink.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(directlink.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(directlink.FieldFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.SpeedLimit(); ok {
		_spec.SetField(directlink.FieldSpeedLimit, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSpeedLimit(); ok {
		_spec.AddField(directlink.FieldSpeedLimit, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Downloads(); ok {
		_spec.SetField(directlink.FieldDownloads, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedDownloads(); ok {
		_spec.AddField(directlink.FieldDownloads, field.TypeInt64, value)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   directlink.FileTable,
			Columns: []string{directlink.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   directlink.FileTable,
			Columns: []string{directlink.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &DirectLink{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{directlink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
