// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
)

// NotificationType is the model entity for the NotificationType schema.
type NotificationType struct {
	config `json:"-"`
	// ID of the ent.
	ID uint `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 通知类型唯一标识
	Code string `json:"code,omitempty"`
	// 通知类型显示名称
	Name string `json:"name,omitempty"`
	// 通知类型描述
	Description string `json:"description,omitempty"`
	// 通知类型分类
	Category string `json:"category,omitempty"`
	// 是否启用该通知类型
	IsActive bool `json:"is_active,omitempty"`
	// 默认是否为用户启用
	DefaultEnabled bool `json:"default_enabled,omitempty"`
	// 支持的通知渠道
	SupportedChannels []string `json:"supported_channels,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationTypeQuery when eager-loading is set.
	Edges        NotificationTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NotificationTypeEdges holds the relations/edges for other nodes in the graph.
type NotificationTypeEdges struct {
	// UserConfigs holds the value of the user_configs edge.
	UserConfigs []*UserNotificationConfig `json:"user_configs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserConfigsOrErr returns the UserConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationTypeEdges) UserConfigsOrErr() ([]*UserNotificationConfig, error) {
	if e.loadedTypes[0] {
		return e.UserConfigs, nil
	}
	return nil, &NotLoadedError{edge: "user_configs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NotificationType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case notificationtype.FieldSupportedChannels:
			values[i] = new([]byte)
		case notificationtype.FieldIsActive, notificationtype.FieldDefaultEnabled:
			values[i] = new(sql.NullBool)
		case notificationtype.FieldID:
			values[i] = new(sql.NullInt64)
		case notificationtype.FieldCode, notificationtype.FieldName, notificationtype.FieldDescription, notificationtype.FieldCategory:
			values[i] = new(sql.NullString)
		case notificationtype.FieldCreatedAt, notificationtype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NotificationType fields.
func (_m *NotificationType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notificationtype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = uint(value.Int64)
		case notificationtype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case notificationtype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case notificationtype.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case notificationtype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case notificationtype.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case notificationtype.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = value.String
			}
		case notificationtype.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				_m.IsActive = value.Bool
			}
		case notificationtype.FieldDefaultEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field default_enabled", values[i])
			} else if value.Valid {
				_m.DefaultEnabled = value.Bool
			}
		case notificationtype.FieldSupportedChannels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field supported_channels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.SupportedChannels); err != nil {
					return fmt.Errorf("unmarshal field supported_channels: %w", err)
				}
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NotificationType.
// This includes values selected through modifiers, order, etc.
func (_m *NotificationType) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUserConfigs queries the "user_configs" edge of the NotificationType entity.
func (_m *NotificationType) QueryUserConfigs() *UserNotificationConfigQuery {
	return NewNotificationTypeClient(_m.config).QueryUserConfigs(_m)
}

// Update returns a builder for updating this NotificationType.
// Note that you need to call NotificationType.Unwrap() before calling this method if this NotificationType
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NotificationType) Update() *NotificationTypeUpdateOne {
	return NewNotificationTypeClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NotificationType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NotificationType) Unwrap() *NotificationType {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: NotificationType is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NotificationType) String() string {
	var builder strings.Builder
	builder.WriteString("NotificationType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(_m.Category)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsActive))
	builder.WriteString(", ")
	builder.WriteString("default_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.DefaultEnabled))
	builder.WriteString(", ")
	builder.WriteString("supported_channels=")
	builder.WriteString(fmt.Sprintf("%v", _m.SupportedChannels))
	builder.WriteByte(')')
	return builder.String()
}

// NotificationTypes is a parsable slice of NotificationType.
type NotificationTypes []*NotificationType
