// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/album"
	"github.com/anzhiyu-c/anheyu-app/ent/albumcategory"
)

// AlbumCategoryCreate is the builder for creating a AlbumCategory entity.
type AlbumCategoryCreate struct {
	config
	mutation *AlbumCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (_c *AlbumCategoryCreate) SetName(v string) *AlbumCategoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *AlbumCategoryCreate) SetDescription(v string) *AlbumCategoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *AlbumCategoryCreate) SetNillableDescription(v *string) *AlbumCategoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetDisplayOrder sets the "display_order" field.
func (_c *AlbumCategoryCreate) SetDisplayOrder(v int) *AlbumCategoryCreate {
	_c.mutation.SetDisplayOrder(v)
	return _c
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (_c *AlbumCategoryCreate) SetNillableDisplayOrder(v *int) *AlbumCategoryCreate {
	if v != nil {
		_c.SetDisplayOrder(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AlbumCategoryCreate) SetID(v uint) *AlbumCategoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (_c *AlbumCategoryCreate) AddAlbumIDs(ids ...uint) *AlbumCategoryCreate {
	_c.mutation.AddAlbumIDs(ids...)
	return _c
}

// AddAlbums adds the "albums" edges to the Album entity.
func (_c *AlbumCategoryCreate) AddAlbums(v ...*Album) *AlbumCategoryCreate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAlbumIDs(ids...)
}

// Mutation returns the AlbumCategoryMutation object of the builder.
func (_c *AlbumCategoryCreate) Mutation() *AlbumCategoryMutation {
	return _c.mutation
}

// Save creates the AlbumCategory in the database.
func (_c *AlbumCategoryCreate) Save(ctx context.Context) (*AlbumCategory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AlbumCategoryCreate) SaveX(ctx context.Context) *AlbumCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AlbumCategoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AlbumCategoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AlbumCategoryCreate) defaults() {
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		v := albumcategory.DefaultDisplayOrder
		_c.mutation.SetDisplayOrder(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AlbumCategoryCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AlbumCategory.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := albumcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AlbumCategory.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayOrder(); !ok {
		return &ValidationError{Name: "display_order", err: errors.New(`ent: missing required field "AlbumCategory.display_order"`)}
	}
	return nil
}

func (_c *AlbumCategoryCreate) sqlSave(ctx context.Context) (*AlbumCategory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AlbumCategoryCreate) createSpec() (*AlbumCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &AlbumCategory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(albumcategory.Table, sqlgraph.NewFieldSpec(albumcategory.FieldID, field.TypeUint))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(albumcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(albumcategory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.DisplayOrder(); ok {
		_spec.SetField(albumcategory.FieldDisplayOrder, field.TypeInt, value)
		_node.DisplayOrder = value
	}
	if nodes := _c.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   albumcategory.AlbumsTable,
			Columns: []string{albumcategory.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlbumCategory.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlbumCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *AlbumCategoryCreate) OnConflict(opts ...sql.ConflictOption) *AlbumCategoryUpsertOne {
	_c.conflict = opts
	return &AlbumCategoryUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AlbumCategoryCreate) OnConflictColumns(columns ...string) *AlbumCategoryUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AlbumCategoryUpsertOne{
		create: _c,
	}
}

type (
	// AlbumCategoryUpsertOne is the builder for "upsert"-ing
	//  one AlbumCategory node.
	AlbumCategoryUpsertOne struct {
		create *AlbumCategoryCreate
	}

	// AlbumCategoryUpsert is the "OnConflict" setter.
	AlbumCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *AlbumCategoryUpsert) SetName(v string) *AlbumCategoryUpsert {
	u.Set(albumcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlbumCategoryUpsert) UpdateName() *AlbumCategoryUpsert {
	u.SetExcluded(albumcategory.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *AlbumCategoryUpsert) SetDescription(v string) *AlbumCategoryUpsert {
	u.Set(albumcategory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlbumCategoryUpsert) UpdateDescription() *AlbumCategoryUpsert {
	u.SetExcluded(albumcategory.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AlbumCategoryUpsert) ClearDescription() *AlbumCategoryUpsert {
	u.SetNull(albumcategory.FieldDescription)
	return u
}

// SetDisplayOrder sets the "display_order" field.
func (u *AlbumCategoryUpsert) SetDisplayOrder(v int) *AlbumCategoryUpsert {
	u.Set(albumcategory.FieldDisplayOrder, v)
	return u
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *AlbumCategoryUpsert) UpdateDisplayOrder() *AlbumCategoryUpsert {
	u.SetExcluded(albumcategory.FieldDisplayOrder)
	return u
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *AlbumCategoryUpsert) AddDisplayOrder(v int) *AlbumCategoryUpsert {
	u.Add(albumcategory.FieldDisplayOrder, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(albumcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlbumCategoryUpsertOne) UpdateNewValues() *AlbumCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(albumcategory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AlbumCategoryUpsertOne) Ignore() *AlbumCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlbumCategoryUpsertOne) DoNothing() *AlbumCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlbumCategoryCreate.OnConflict
// documentation for more info.
func (u *AlbumCategoryUpsertOne) Update(set func(*AlbumCategoryUpsert)) *AlbumCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlbumCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AlbumCategoryUpsertOne) SetName(v string) *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlbumCategoryUpsertOne) UpdateName() *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AlbumCategoryUpsertOne) SetDescription(v string) *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlbumCategoryUpsertOne) UpdateDescription() *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AlbumCategoryUpsertOne) ClearDescription() *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *AlbumCategoryUpsertOne) SetDisplayOrder(v int) *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *AlbumCategoryUpsertOne) AddDisplayOrder(v int) *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *AlbumCategoryUpsertOne) UpdateDisplayOrder() *AlbumCategoryUpsertOne {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// Exec executes the query.
func (u *AlbumCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlbumCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlbumCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AlbumCategoryUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AlbumCategoryUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AlbumCategoryCreateBulk is the builder for creating many AlbumCategory entities in bulk.
type AlbumCategoryCreateBulk struct {
	config
	err      error
	builders []*AlbumCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AlbumCategory entities in the database.
func (_c *AlbumCategoryCreateBulk) Save(ctx context.Context) ([]*AlbumCategory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AlbumCategory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlbumCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AlbumCategoryCreateBulk) SaveX(ctx context.Context) []*AlbumCategory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AlbumCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AlbumCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AlbumCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AlbumCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (_c *AlbumCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AlbumCategoryUpsertBulk {
	_c.conflict = opts
	return &AlbumCategoryUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AlbumCategoryCreateBulk) OnConflictColumns(columns ...string) *AlbumCategoryUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AlbumCategoryUpsertBulk{
		create: _c,
	}
}

// AlbumCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AlbumCategory nodes.
type AlbumCategoryUpsertBulk struct {
	create *AlbumCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(albumcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AlbumCategoryUpsertBulk) UpdateNewValues() *AlbumCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(albumcategory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AlbumCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AlbumCategoryUpsertBulk) Ignore() *AlbumCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AlbumCategoryUpsertBulk) DoNothing() *AlbumCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AlbumCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *AlbumCategoryUpsertBulk) Update(set func(*AlbumCategoryUpsert)) *AlbumCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AlbumCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AlbumCategoryUpsertBulk) SetName(v string) *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AlbumCategoryUpsertBulk) UpdateName() *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *AlbumCategoryUpsertBulk) SetDescription(v string) *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AlbumCategoryUpsertBulk) UpdateDescription() *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AlbumCategoryUpsertBulk) ClearDescription() *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.ClearDescription()
	})
}

// SetDisplayOrder sets the "display_order" field.
func (u *AlbumCategoryUpsertBulk) SetDisplayOrder(v int) *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.SetDisplayOrder(v)
	})
}

// AddDisplayOrder adds v to the "display_order" field.
func (u *AlbumCategoryUpsertBulk) AddDisplayOrder(v int) *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.AddDisplayOrder(v)
	})
}

// UpdateDisplayOrder sets the "display_order" field to the value that was provided on create.
func (u *AlbumCategoryUpsertBulk) UpdateDisplayOrder() *AlbumCategoryUpsertBulk {
	return u.Update(func(s *AlbumCategoryUpsert) {
		s.UpdateDisplayOrder()
	})
}

// Exec executes the query.
func (u *AlbumCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AlbumCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AlbumCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AlbumCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
