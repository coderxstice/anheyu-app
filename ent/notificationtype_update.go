// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/anzhiyu-c/anheyu-app/ent/notificationtype"
	"github.com/anzhiyu-c/anheyu-app/ent/predicate"
	"github.com/anzhiyu-c/anheyu-app/ent/usernotificationconfig"
)

// NotificationTypeUpdate is the builder for updating NotificationType entities.
type NotificationTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *NotificationTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotificationTypeUpdate builder.
func (_u *NotificationTypeUpdate) Where(ps ...predicate.NotificationType) *NotificationTypeUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationTypeUpdate) SetUpdatedAt(v time.Time) *NotificationTypeUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationTypeUpdate) SetCode(v string) *NotificationTypeUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableCode(v *string) *NotificationTypeUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationTypeUpdate) SetName(v string) *NotificationTypeUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableName(v *string) *NotificationTypeUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationTypeUpdate) SetDescription(v string) *NotificationTypeUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableDescription(v *string) *NotificationTypeUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationTypeUpdate) ClearDescription() *NotificationTypeUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *NotificationTypeUpdate) SetCategory(v string) *NotificationTypeUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableCategory(v *string) *NotificationTypeUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *NotificationTypeUpdate) SetIsActive(v bool) *NotificationTypeUpdate {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableIsActive(v *bool) *NotificationTypeUpdate {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetDefaultEnabled sets the "default_enabled" field.
func (_u *NotificationTypeUpdate) SetDefaultEnabled(v bool) *NotificationTypeUpdate {
	_u.mutation.SetDefaultEnabled(v)
	return _u
}

// SetNillableDefaultEnabled sets the "default_enabled" field if the given value is not nil.
func (_u *NotificationTypeUpdate) SetNillableDefaultEnabled(v *bool) *NotificationTypeUpdate {
	if v != nil {
		_u.SetDefaultEnabled(*v)
	}
	return _u
}

// SetSupportedChannels sets the "supported_channels" field.
func (_u *NotificationTypeUpdate) SetSupportedChannels(v []string) *NotificationTypeUpdate {
	_u.mutation.SetSupportedChannels(v)
	return _u
}

// AppendSupportedChannels appends value to the "supported_channels" field.
func (_u *NotificationTypeUpdate) AppendSupportedChannels(v []string) *NotificationTypeUpdate {
	_u.mutation.AppendSupportedChannels(v)
	return _u
}

// ClearSupportedChannels clears the value of the "supported_channels" field.
func (_u *NotificationTypeUpdate) ClearSupportedChannels() *NotificationTypeUpdate {
	_u.mutation.ClearSupportedChannels()
	return _u
}

// AddUserConfigIDs adds the "user_configs" edge to the UserNotificationConfig entity by IDs.
func (_u *NotificationTypeUpdate) AddUserConfigIDs(ids ...uint) *NotificationTypeUpdate {
	_u.mutation.AddUserConfigIDs(ids...)
	return _u
}

// AddUserConfigs adds the "user_configs" edges to the UserNotificationConfig entity.
func (_u *NotificationTypeUpdate) AddUserConfigs(v ...*UserNotificationConfig) *NotificationTypeUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserConfigIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (_u *NotificationTypeUpdate) Mutation() *NotificationTypeMutation {
	return _u.mutation
}

// ClearUserConfigs clears all "user_configs" edges to the UserNotificationConfig entity.
func (_u *NotificationTypeUpdate) ClearUserConfigs() *NotificationTypeUpdate {
	_u.mutation.ClearUserConfigs()
	return _u
}

// RemoveUserConfigIDs removes the "user_configs" edge to UserNotificationConfig entities by IDs.
func (_u *NotificationTypeUpdate) RemoveUserConfigIDs(ids ...uint) *NotificationTypeUpdate {
	_u.mutation.RemoveUserConfigIDs(ids...)
	return _u
}

// RemoveUserConfigs removes "user_configs" edges to UserNotificationConfig entities.
func (_u *NotificationTypeUpdate) RemoveUserConfigs(v ...*UserNotificationConfig) *NotificationTypeUpdate {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationTypeUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationTypeUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationTypeUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationTypeUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationtype.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationTypeUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationtype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationType.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationType.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := notificationtype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "NotificationType.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := notificationtype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "NotificationType.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationTypeUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationTypeUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationtype.Table, notificationtype.Columns, sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationtype.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationtype.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationtype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationtype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(notificationtype.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(notificationtype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultEnabled(); ok {
		_spec.SetField(notificationtype.FieldDefaultEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SupportedChannels(); ok {
		_spec.SetField(notificationtype.FieldSupportedChannels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSupportedChannels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notificationtype.FieldSupportedChannels, value)
		})
	}
	if _u.mutation.SupportedChannelsCleared() {
		_spec.ClearField(notificationtype.FieldSupportedChannels, field.TypeJSON)
	}
	if _u.mutation.UserConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserConfigsIDs(); len(nodes) > 0 && !_u.mutation.UserConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationTypeUpdateOne is the builder for updating a single NotificationType entity.
type NotificationTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotificationTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationTypeUpdateOne) SetUpdatedAt(v time.Time) *NotificationTypeUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCode sets the "code" field.
func (_u *NotificationTypeUpdateOne) SetCode(v string) *NotificationTypeUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableCode(v *string) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationTypeUpdateOne) SetName(v string) *NotificationTypeUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableName(v *string) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationTypeUpdateOne) SetDescription(v string) *NotificationTypeUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableDescription(v *string) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationTypeUpdateOne) ClearDescription() *NotificationTypeUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *NotificationTypeUpdateOne) SetCategory(v string) *NotificationTypeUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableCategory(v *string) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetIsActive sets the "is_active" field.
func (_u *NotificationTypeUpdateOne) SetIsActive(v bool) *NotificationTypeUpdateOne {
	_u.mutation.SetIsActive(v)
	return _u
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableIsActive(v *bool) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetIsActive(*v)
	}
	return _u
}

// SetDefaultEnabled sets the "default_enabled" field.
func (_u *NotificationTypeUpdateOne) SetDefaultEnabled(v bool) *NotificationTypeUpdateOne {
	_u.mutation.SetDefaultEnabled(v)
	return _u
}

// SetNillableDefaultEnabled sets the "default_enabled" field if the given value is not nil.
func (_u *NotificationTypeUpdateOne) SetNillableDefaultEnabled(v *bool) *NotificationTypeUpdateOne {
	if v != nil {
		_u.SetDefaultEnabled(*v)
	}
	return _u
}

// SetSupportedChannels sets the "supported_channels" field.
func (_u *NotificationTypeUpdateOne) SetSupportedChannels(v []string) *NotificationTypeUpdateOne {
	_u.mutation.SetSupportedChannels(v)
	return _u
}

// AppendSupportedChannels appends value to the "supported_channels" field.
func (_u *NotificationTypeUpdateOne) AppendSupportedChannels(v []string) *NotificationTypeUpdateOne {
	_u.mutation.AppendSupportedChannels(v)
	return _u
}

// ClearSupportedChannels clears the value of the "supported_channels" field.
func (_u *NotificationTypeUpdateOne) ClearSupportedChannels() *NotificationTypeUpdateOne {
	_u.mutation.ClearSupportedChannels()
	return _u
}

// AddUserConfigIDs adds the "user_configs" edge to the UserNotificationConfig entity by IDs.
func (_u *NotificationTypeUpdateOne) AddUserConfigIDs(ids ...uint) *NotificationTypeUpdateOne {
	_u.mutation.AddUserConfigIDs(ids...)
	return _u
}

// AddUserConfigs adds the "user_configs" edges to the UserNotificationConfig entity.
func (_u *NotificationTypeUpdateOne) AddUserConfigs(v ...*UserNotificationConfig) *NotificationTypeUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserConfigIDs(ids...)
}

// Mutation returns the NotificationTypeMutation object of the builder.
func (_u *NotificationTypeUpdateOne) Mutation() *NotificationTypeMutation {
	return _u.mutation
}

// ClearUserConfigs clears all "user_configs" edges to the UserNotificationConfig entity.
func (_u *NotificationTypeUpdateOne) ClearUserConfigs() *NotificationTypeUpdateOne {
	_u.mutation.ClearUserConfigs()
	return _u
}

// RemoveUserConfigIDs removes the "user_configs" edge to UserNotificationConfig entities by IDs.
func (_u *NotificationTypeUpdateOne) RemoveUserConfigIDs(ids ...uint) *NotificationTypeUpdateOne {
	_u.mutation.RemoveUserConfigIDs(ids...)
	return _u
}

// RemoveUserConfigs removes "user_configs" edges to UserNotificationConfig entities.
func (_u *NotificationTypeUpdateOne) RemoveUserConfigs(v ...*UserNotificationConfig) *NotificationTypeUpdateOne {
	ids := make([]uint, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserConfigIDs(ids...)
}

// Where appends a list predicates to the NotificationTypeUpdate builder.
func (_u *NotificationTypeUpdateOne) Where(ps ...predicate.NotificationType) *NotificationTypeUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationTypeUpdateOne) Select(field string, fields ...string) *NotificationTypeUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationType entity.
func (_u *NotificationTypeUpdateOne) Save(ctx context.Context) (*NotificationType, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationTypeUpdateOne) SaveX(ctx context.Context) *NotificationType {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationTypeUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationtype.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationTypeUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := notificationtype.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "NotificationType.code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationtype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationType.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := notificationtype.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "NotificationType.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := notificationtype.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "NotificationType.category": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *NotificationTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotificationTypeUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *NotificationTypeUpdateOne) sqlSave(ctx context.Context) (_node *NotificationType, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationtype.Table, notificationtype.Columns, sqlgraph.NewFieldSpec(notificationtype.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationtype.FieldID)
		for _, f := range fields {
			if !notificationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationtype.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(notificationtype.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationtype.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationtype.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationtype.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(notificationtype.FieldCategory, field.TypeString, value)
	}
	if value, ok := _u.mutation.IsActive(); ok {
		_spec.SetField(notificationtype.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DefaultEnabled(); ok {
		_spec.SetField(notificationtype.FieldDefaultEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SupportedChannels(); ok {
		_spec.SetField(notificationtype.FieldSupportedChannels, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSupportedChannels(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, notificationtype.FieldSupportedChannels, value)
		})
	}
	if _u.mutation.SupportedChannelsCleared() {
		_spec.ClearField(notificationtype.FieldSupportedChannels, field.TypeJSON)
	}
	if _u.mutation.UserConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserConfigsIDs(); len(nodes) > 0 && !_u.mutation.UserConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   notificationtype.UserConfigsTable,
			Columns: []string{notificationtype.UserConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usernotificationconfig.FieldID, field.TypeUint),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &NotificationType{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
